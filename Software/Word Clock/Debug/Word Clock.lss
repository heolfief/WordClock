
Word Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000df0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000e64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000e64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001535  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000933  00000000  00000000  00002525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4d  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00003ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  00003fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016b3  00000000  00000000  0000456a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005c1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_2>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	60 01       	movw	r12, r0
  56:	60 01       	movw	r12, r0
  58:	60 01       	movw	r12, r0
  5a:	60 01       	movw	r12, r0
  5c:	60 01       	movw	r12, r0
  5e:	65 01       	movw	r12, r10
  60:	65 01       	movw	r12, r10
  62:	65 01       	movw	r12, r10
  64:	65 01       	movw	r12, r10
  66:	65 01       	movw	r12, r10
  68:	6c 01       	movw	r12, r24
  6a:	6c 01       	movw	r12, r24
  6c:	6c 01       	movw	r12, r24
  6e:	6c 01       	movw	r12, r24
  70:	6c 01       	movw	r12, r24
  72:	73 01       	movw	r14, r6
  74:	73 01       	movw	r14, r6
  76:	73 01       	movw	r14, r6
  78:	73 01       	movw	r14, r6
  7a:	73 01       	movw	r14, r6
  7c:	7a 01       	movw	r14, r20
  7e:	7a 01       	movw	r14, r20
  80:	7a 01       	movw	r14, r20
  82:	7a 01       	movw	r14, r20
  84:	7a 01       	movw	r14, r20
  86:	81 01       	movw	r16, r2
  88:	81 01       	movw	r16, r2
  8a:	81 01       	movw	r16, r2
  8c:	81 01       	movw	r16, r2
  8e:	81 01       	movw	r16, r2
  90:	88 01       	movw	r16, r16
  92:	88 01       	movw	r16, r16
  94:	88 01       	movw	r16, r16
  96:	88 01       	movw	r16, r16
  98:	88 01       	movw	r16, r16
  9a:	8f 01       	movw	r16, r30
  9c:	8f 01       	movw	r16, r30
  9e:	8f 01       	movw	r16, r30
  a0:	8f 01       	movw	r16, r30
  a2:	8f 01       	movw	r16, r30
  a4:	96 01       	movw	r18, r12
  a6:	96 01       	movw	r18, r12
  a8:	96 01       	movw	r18, r12
  aa:	96 01       	movw	r18, r12
  ac:	96 01       	movw	r18, r12
  ae:	9d 01       	movw	r18, r26
  b0:	9d 01       	movw	r18, r26
  b2:	9d 01       	movw	r18, r26
  b4:	9d 01       	movw	r18, r26
  b6:	9d 01       	movw	r18, r26
  b8:	a4 01       	movw	r20, r8
  ba:	a4 01       	movw	r20, r8
  bc:	a4 01       	movw	r20, r8
  be:	a4 01       	movw	r20, r8
  c0:	a4 01       	movw	r20, r8
  c2:	ab 01       	movw	r20, r22
  c4:	ab 01       	movw	r20, r22
  c6:	ab 01       	movw	r20, r22
  c8:	ab 01       	movw	r20, r22
  ca:	ab 01       	movw	r20, r22
  cc:	c1 01       	movw	r24, r2
  ce:	c9 01       	movw	r24, r18
  d0:	d1 01       	movw	r26, r2
  d2:	da 01       	movw	r26, r20
  d4:	e2 01       	movw	r28, r4
  d6:	ea 01       	movw	r28, r20
  d8:	f2 01       	movw	r30, r4
  da:	fa 01       	movw	r30, r20
  dc:	02 02       	muls	r16, r18
  de:	0a 02       	muls	r16, r26
  e0:	12 02       	muls	r17, r18
  e2:	1a 02       	muls	r17, r26
  e4:	a7 02       	muls	r26, r23
  e6:	b0 02       	muls	r27, r16
  e8:	b9 02       	muls	r27, r25
  ea:	c2 02       	muls	r28, r18
  ec:	cb 02       	muls	r28, r27
  ee:	d4 02       	muls	r29, r20
  f0:	dd 02       	muls	r29, r29
  f2:	e6 02       	muls	r30, r22

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf e5       	ldi	r28, 0x5F	; 95
  fa:	d8 e0       	ldi	r29, 0x08	; 8
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_clear_bss>:
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	a0 e6       	ldi	r26, 0x60	; 96
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a3 36       	cpi	r26, 0x63	; 99
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <main>
 114:	0c 94 f6 06 	jmp	0xdec	; 0xdec <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 11c:	88 e4       	ldi	r24, 0x48	; 72
 11e:	80 b9       	out	0x00, r24	; 0
 120:	08 95       	ret

00000122 <i2c_start>:
 122:	16 be       	out	0x36, r1	; 54
 124:	94 ea       	ldi	r25, 0xA4	; 164
 126:	96 bf       	out	0x36, r25	; 54
 128:	06 b6       	in	r0, 0x36	; 54
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <i2c_start+0x6>
 12e:	91 b1       	in	r25, 0x01	; 1
 130:	98 7f       	andi	r25, 0xF8	; 248
 132:	98 30       	cpi	r25, 0x08	; 8
 134:	79 f4       	brne	.+30     	; 0x154 <i2c_start+0x32>
 136:	83 b9       	out	0x03, r24	; 3
 138:	84 e8       	ldi	r24, 0x84	; 132
 13a:	86 bf       	out	0x36, r24	; 54
 13c:	06 b6       	in	r0, 0x36	; 54
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <i2c_start+0x1a>
 142:	91 b1       	in	r25, 0x01	; 1
 144:	98 7f       	andi	r25, 0xF8	; 248
 146:	98 31       	cpi	r25, 0x18	; 24
 148:	39 f0       	breq	.+14     	; 0x158 <i2c_start+0x36>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 34       	cpi	r25, 0x40	; 64
 14e:	29 f4       	brne	.+10     	; 0x15a <i2c_start+0x38>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <i2c_write>:
 15c:	83 b9       	out	0x03, r24	; 3
 15e:	84 e8       	ldi	r24, 0x84	; 132
 160:	86 bf       	out	0x36, r24	; 54
 162:	06 b6       	in	r0, 0x36	; 54
 164:	07 fe       	sbrs	r0, 7
 166:	fd cf       	rjmp	.-6      	; 0x162 <i2c_write+0x6>
 168:	91 b1       	in	r25, 0x01	; 1
 16a:	98 7f       	andi	r25, 0xF8	; 248
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	98 32       	cpi	r25, 0x28	; 40
 170:	09 f4       	brne	.+2      	; 0x174 <i2c_write+0x18>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret

00000176 <i2c_read_ack>:
 176:	84 ec       	ldi	r24, 0xC4	; 196
 178:	86 bf       	out	0x36, r24	; 54
 17a:	06 b6       	in	r0, 0x36	; 54
 17c:	07 fe       	sbrs	r0, 7
 17e:	fd cf       	rjmp	.-6      	; 0x17a <i2c_read_ack+0x4>
 180:	83 b1       	in	r24, 0x03	; 3
 182:	08 95       	ret

00000184 <i2c_read_nack>:
 184:	84 e8       	ldi	r24, 0x84	; 132
 186:	86 bf       	out	0x36, r24	; 54
 188:	06 b6       	in	r0, 0x36	; 54
 18a:	07 fe       	sbrs	r0, 7
 18c:	fd cf       	rjmp	.-6      	; 0x188 <i2c_read_nack+0x4>
 18e:	83 b1       	in	r24, 0x03	; 3
 190:	08 95       	ret

00000192 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 192:	84 e9       	ldi	r24, 0x94	; 148
 194:	86 bf       	out	0x36, r24	; 54
 196:	08 95       	ret

00000198 <bcdtodec>:
	*sec = bcdtodec(i2c_read_ack());			// Read seconds from register
	*min = bcdtodec(i2c_read_ack());			// Read minutes from register
	*hour = bcdtodec(i2c_read_nack() & 0x3F);	// Read hours from register
	
	i2c_stop();									// End I2C communication
}
 198:	98 2f       	mov	r25, r24
 19a:	92 95       	swap	r25
 19c:	9f 70       	andi	r25, 0x0F	; 15
 19e:	99 0f       	add	r25, r25
 1a0:	29 2f       	mov	r18, r25
 1a2:	22 0f       	add	r18, r18
 1a4:	22 0f       	add	r18, r18
 1a6:	92 0f       	add	r25, r18
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	89 0f       	add	r24, r25
 1ac:	08 95       	ret

000001ae <dectobcd>:
 1ae:	9d ec       	ldi	r25, 0xCD	; 205
 1b0:	89 9f       	mul	r24, r25
 1b2:	91 2d       	mov	r25, r1
 1b4:	11 24       	eor	r1, r1
 1b6:	96 95       	lsr	r25
 1b8:	96 95       	lsr	r25
 1ba:	96 95       	lsr	r25
 1bc:	39 2f       	mov	r19, r25
 1be:	33 0f       	add	r19, r19
 1c0:	23 2f       	mov	r18, r19
 1c2:	22 0f       	add	r18, r18
 1c4:	22 0f       	add	r18, r18
 1c6:	23 0f       	add	r18, r19
 1c8:	82 1b       	sub	r24, r18
 1ca:	20 e1       	ldi	r18, 0x10	; 16
 1cc:	92 9f       	mul	r25, r18
 1ce:	80 0d       	add	r24, r0
 1d0:	11 24       	eor	r1, r1
 1d2:	08 95       	ret

000001d4 <rtc_set_time_12h>:
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	8c 30       	cpi	r24, 0x0C	; 12
 1dc:	10 f5       	brcc	.+68     	; 0x222 <rtc_set_time_12h+0x4e>
 1de:	d4 2f       	mov	r29, r20
 1e0:	c6 2f       	mov	r28, r22
 1e2:	22 23       	and	r18, r18
 1e4:	29 f0       	breq	.+10     	; 0x1f0 <rtc_set_time_12h+0x1c>
 1e6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <dectobcd>
 1ea:	18 2f       	mov	r17, r24
 1ec:	10 66       	ori	r17, 0x60	; 96
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <rtc_set_time_12h+0x24>
 1f0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <dectobcd>
 1f4:	18 2f       	mov	r17, r24
 1f6:	10 64       	ori	r17, 0x40	; 64
 1f8:	80 ed       	ldi	r24, 0xD0	; 208
 1fa:	0e 94 91 00 	call	0x122	; 0x122 <i2c_start>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
 204:	8d 2f       	mov	r24, r29
 206:	0e 94 d7 00 	call	0x1ae	; 0x1ae <dectobcd>
 20a:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
 20e:	8c 2f       	mov	r24, r28
 210:	0e 94 d7 00 	call	0x1ae	; 0x1ae <dectobcd>
 214:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
 218:	81 2f       	mov	r24, r17
 21a:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
 21e:	0e 94 c9 00 	call	0x192	; 0x192 <i2c_stop>
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	08 95       	ret

0000022a <rtc_get_time_12h>:

// Set time in 12h format (only use if rtc_get_time_12h function has been called once to program RTC to work in 12h mode)
void rtc_get_time_12h(uint8_t *hour, uint8_t *min, uint8_t *sec, uint8_t *am_pm)
{	
 22a:	cf 92       	push	r12
 22c:	df 92       	push	r13
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	7c 01       	movw	r14, r24
 23c:	eb 01       	movw	r28, r22
 23e:	6a 01       	movw	r12, r20
 240:	89 01       	movw	r16, r18
	uint8_t temphour;
	
	i2c_start((RTC_ADDR<<1) | I2C_WRITE); 		// Start I2C at RTC adress, write mode
 242:	80 ed       	ldi	r24, 0xD0	; 208
 244:	0e 94 91 00 	call	0x122	; 0x122 <i2c_start>
	i2c_write(0x00);							// Point to register adress 0x00
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_write>
	i2c_stop();									// End I2C communication
 24e:	0e 94 c9 00 	call	0x192	; 0x192 <i2c_stop>
	
	i2c_start((RTC_ADDR<<1) | I2C_READ); 		// Start I2C at RTC adress, read mode
 252:	81 ed       	ldi	r24, 0xD1	; 209
 254:	0e 94 91 00 	call	0x122	; 0x122 <i2c_start>
	
	*sec = bcdtodec(i2c_read_ack());			// Read seconds from register
 258:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_read_ack>
 25c:	0e 94 cc 00 	call	0x198	; 0x198 <bcdtodec>
 260:	f6 01       	movw	r30, r12
 262:	80 83       	st	Z, r24
	*min = bcdtodec(i2c_read_ack());			// Read minutes from register
 264:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_read_ack>
 268:	0e 94 cc 00 	call	0x198	; 0x198 <bcdtodec>
 26c:	88 83       	st	Y, r24
	temphour = i2c_read_nack();					// Read hours from register
 26e:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_read_nack>
 272:	c8 2f       	mov	r28, r24
	
	i2c_stop();									// End I2C communication
 274:	0e 94 c9 00 	call	0x192	; 0x192 <i2c_stop>

	*hour =  bcdtodec(temphour & 0x1F);			// Format hours
 278:	8c 2f       	mov	r24, r28
 27a:	8f 71       	andi	r24, 0x1F	; 31
 27c:	0e 94 cc 00 	call	0x198	; 0x198 <bcdtodec>
 280:	f7 01       	movw	r30, r14
 282:	80 83       	st	Z, r24

	if (temphour & 0x20)						// if PM
 284:	c5 ff       	sbrs	r28, 5
 286:	04 c0       	rjmp	.+8      	; 0x290 <rtc_get_time_12h+0x66>
		*am_pm = 1;								// Set am_pm bit to 1 (PM)
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	f8 01       	movw	r30, r16
 28c:	80 83       	st	Z, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <rtc_get_time_12h+0x6a>
	else										// if AM
		*am_pm = 0;								// Set am_pm bit to 0 (AM)
 290:	f8 01       	movw	r30, r16
 292:	10 82       	st	Z, r1
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <minutes_to_matrix>:
		}
	}
}

void minutes_to_matrix(uint8_t now_minutes, uint8_t *line_data)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	eb 01       	movw	r28, r22
	switch(now_minutes)
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	8c 33       	cpi	r24, 0x3C	; 60
 2b0:	91 05       	cpc	r25, r1
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <minutes_to_matrix+0x10>
 2b4:	56 c0       	rjmp	.+172    	; 0x362 <minutes_to_matrix+0xbc>
 2b6:	fc 01       	movw	r30, r24
 2b8:	e6 5d       	subi	r30, 0xD6	; 214
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__tablejump2__>
	{
		// Each bit correspond to the letter above him. LED matrix is active low, 0 is LED ON, 1 is LED OFF
		
		// minutes from 0 to 4 : line 0,1 and 2 OFF						   HATWENTY					  FIFVTEEN					 LFXPASTO
	case  0 : case  1 : case  2 : case  3 : case  4 : line_data[0] = 0b11111111; line_data[1] = 0b11111111; line_data[2] = 0b11111111; break;
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	88 83       	st	Y, r24
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	8a 83       	std	Y+2, r24	; 0x02
 2c8:	4c c0       	rjmp	.+152    	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 5 to 9 : "five" and "past" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
	case  5 : case  6 : case  7 : case  8 : case  9 : line_data[0] = 0b11111111; line_data[1] = 0b00101011; line_data[2] = 0b11100001; break;
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	88 83       	st	Y, r24
 2ce:	8b e2       	ldi	r24, 0x2B	; 43
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	81 ee       	ldi	r24, 0xE1	; 225
 2d4:	8a 83       	std	Y+2, r24	; 0x02
 2d6:	45 c0       	rjmp	.+138    	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 10 to 14 : "ten" and "past" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 10 : case 11 : case 12 : case 13 : case 14 : line_data[0] = 0b11010011; line_data[1] = 0b11111111; line_data[2] = 0b11100001; break;
 2d8:	83 ed       	ldi	r24, 0xD3	; 211
 2da:	88 83       	st	Y, r24
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	89 83       	std	Y+1, r24	; 0x01
 2e0:	81 ee       	ldi	r24, 0xE1	; 225
 2e2:	8a 83       	std	Y+2, r24	; 0x02
 2e4:	3e c0       	rjmp	.+124    	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 15 to 19 : "fifteen" and "past" words are lit	   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 15 : case 16 : case 17 : case 18 : case 19 : line_data[0] = 0b11111111; line_data[1] = 0b00010000; line_data[2] = 0b11100001; break;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	88 83       	st	Y, r24
 2ea:	80 e1       	ldi	r24, 0x10	; 16
 2ec:	89 83       	std	Y+1, r24	; 0x01
 2ee:	81 ee       	ldi	r24, 0xE1	; 225
 2f0:	8a 83       	std	Y+2, r24	; 0x02
 2f2:	37 c0       	rjmp	.+110    	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 20 to 24 : "twenty" and "past" words are lit	   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 20 : case 21 : case 22 : case 23 : case 24 : line_data[0] = 0b11000000; line_data[1] = 0b11111111; line_data[2] = 0b11100001; break;
 2f4:	80 ec       	ldi	r24, 0xC0	; 192
 2f6:	88 83       	st	Y, r24
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	89 83       	std	Y+1, r24	; 0x01
 2fc:	81 ee       	ldi	r24, 0xE1	; 225
 2fe:	8a 83       	std	Y+2, r24	; 0x02
 300:	30 c0       	rjmp	.+96     	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 25 to 29 : "twenty five" and "past" words are lit  HATWENTY					  FIFVTEEN					 LFXPASTO
	case 25 : case 26 : case 27 : case 28 : case 29 : line_data[0] = 0b11000000; line_data[1] = 0b00101011; line_data[2] = 0b11100001; break;
 302:	80 ec       	ldi	r24, 0xC0	; 192
 304:	88 83       	st	Y, r24
 306:	8b e2       	ldi	r24, 0x2B	; 43
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	81 ee       	ldi	r24, 0xE1	; 225
 30c:	8a 83       	std	Y+2, r24	; 0x02
 30e:	29 c0       	rjmp	.+82     	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 30 to 34 : "half" and "past" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 30 : case 31 : case 32 : case 33 : case 34 : line_data[0] = 0b00111111; line_data[1] = 0b11111111; line_data[2] = 0b00100001; break;
 310:	8f e3       	ldi	r24, 0x3F	; 63
 312:	88 83       	st	Y, r24
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	89 83       	std	Y+1, r24	; 0x01
 318:	81 e2       	ldi	r24, 0x21	; 33
 31a:	8a 83       	std	Y+2, r24	; 0x02
 31c:	22 c0       	rjmp	.+68     	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 35 to 39 : "twenty five" and "to" words are lit	   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 35 : case 36 : case 37 : case 38 : case 39 : line_data[0] = 0b11000000; line_data[1] = 0b00101011; line_data[2] = 0b11111100; break;
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	88 83       	st	Y, r24
 322:	8b e2       	ldi	r24, 0x2B	; 43
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	8c ef       	ldi	r24, 0xFC	; 252
 328:	8a 83       	std	Y+2, r24	; 0x02
 32a:	1b c0       	rjmp	.+54     	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 40 to 44 : "twenty" and "to" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 40 : case 41 : case 42 : case 43 : case 44 : line_data[0] = 0b11000000; line_data[1] = 0b11111111; line_data[2] = 0b11111100; break;
 32c:	80 ec       	ldi	r24, 0xC0	; 192
 32e:	88 83       	st	Y, r24
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	89 83       	std	Y+1, r24	; 0x01
 334:	8c ef       	ldi	r24, 0xFC	; 252
 336:	8a 83       	std	Y+2, r24	; 0x02
 338:	14 c0       	rjmp	.+40     	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 45 to 49 : "fifteen" and "to" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 45 : case 46 : case 47 : case 48 : case 49 : line_data[0] = 0b11111111; line_data[1] = 0b00010000; line_data[2] = 0b11111100; break;
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	88 83       	st	Y, r24
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	8c ef       	ldi	r24, 0xFC	; 252
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	0d c0       	rjmp	.+26     	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 50 to 54 : "ten" and "to" words are lit			   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 50 : case 51 : case 52 : case 53 : case 54 : line_data[0] = 0b11010011; line_data[1] = 0b11111111; line_data[2] = 0b11111100; break;
 348:	83 ed       	ldi	r24, 0xD3	; 211
 34a:	88 83       	st	Y, r24
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	8c ef       	ldi	r24, 0xFC	; 252
 352:	8a 83       	std	Y+2, r24	; 0x02
 354:	06 c0       	rjmp	.+12     	; 0x362 <minutes_to_matrix+0xbc>
		
		// minutes from 55 to 59 : "five" and "to" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
	case 55 : case 56 : case 57 : case 58 : case 59 : line_data[0] = 0b11111111; line_data[1] = 0b00101011; line_data[2] = 0b11111100; break;
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	88 83       	st	Y, r24
 35a:	8b e2       	ldi	r24, 0x2B	; 43
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	8c ef       	ldi	r24, 0xFC	; 252
 360:	8a 83       	std	Y+2, r24	; 0x02
	}
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <hours_to_matrix>:

void hours_to_matrix(uint8_t now_hours, uint8_t *line_data)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	eb 01       	movw	r28, r22
	switch(now_hours)
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	8c 30       	cpi	r24, 0x0C	; 12
 372:	91 05       	cpc	r25, r1
 374:	08 f0       	brcs	.+2      	; 0x378 <hours_to_matrix+0x10>
 376:	65 c0       	rjmp	.+202    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 378:	fc 01       	movw	r30, r24
 37a:	ea 59       	subi	r30, 0x9A	; 154
 37c:	ff 4f       	sbci	r31, 0xFF	; 255
 37e:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__tablejump2__>
	{
		// Each bit correspond to the letter above him. LED matrix is active low, 0 is LED ON, 1 is LED OFF
		
		// 	twelve				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  0 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b00001001; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	8b 83       	std	Y+3, r24	; 0x03
 386:	8c 83       	std	Y+4, r24	; 0x04
 388:	99 e0       	ldi	r25, 0x09	; 9
 38a:	9d 83       	std	Y+5, r25	; 0x05
 38c:	8e 83       	std	Y+6, r24	; 0x06
 38e:	8f 83       	std	Y+7, r24	; 0x07
 390:	58 c0       	rjmp	.+176    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	one					   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  1 : line_data[3] = 0b11111111; line_data[4] = 0b00011111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	8b 83       	std	Y+3, r24	; 0x03
 396:	9f e1       	ldi	r25, 0x1F	; 31
 398:	9c 83       	std	Y+4, r25	; 0x04
 39a:	8d 83       	std	Y+5, r24	; 0x05
 39c:	8e 83       	std	Y+6, r24	; 0x06
 39e:	8f 83       	std	Y+7, r24	; 0x07
 3a0:	50 c0       	rjmp	.+160    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	two					   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  2 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b00111111; line_data[6] = 0b10111111; line_data[7] = 0b11111111; break;
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	8b 83       	std	Y+3, r24	; 0x03
 3a6:	8c 83       	std	Y+4, r24	; 0x04
 3a8:	9f e3       	ldi	r25, 0x3F	; 63
 3aa:	9d 83       	std	Y+5, r25	; 0x05
 3ac:	9f eb       	ldi	r25, 0xBF	; 191
 3ae:	9e 83       	std	Y+6, r25	; 0x06
 3b0:	8f 83       	std	Y+7, r24	; 0x07
 3b2:	47 c0       	rjmp	.+142    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	three				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  3 : line_data[3] = 0b11111111; line_data[4] = 0b11100000; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	8b 83       	std	Y+3, r24	; 0x03
 3b8:	90 ee       	ldi	r25, 0xE0	; 224
 3ba:	9c 83       	std	Y+4, r25	; 0x04
 3bc:	8d 83       	std	Y+5, r24	; 0x05
 3be:	8e 83       	std	Y+6, r24	; 0x06
 3c0:	8f 83       	std	Y+7, r24	; 0x07
 3c2:	3f c0       	rjmp	.+126    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	four				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  4 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b00001111; line_data[7] = 0b11111111; break;
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	8b 83       	std	Y+3, r24	; 0x03
 3c8:	8c 83       	std	Y+4, r24	; 0x04
 3ca:	8d 83       	std	Y+5, r24	; 0x05
 3cc:	9f e0       	ldi	r25, 0x0F	; 15
 3ce:	9e 83       	std	Y+6, r25	; 0x06
 3d0:	8f 83       	std	Y+7, r24	; 0x07
 3d2:	37 c0       	rjmp	.+110    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	five				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  5 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11110000; line_data[7] = 0b11111111; break;
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	8b 83       	std	Y+3, r24	; 0x03
 3d8:	8c 83       	std	Y+4, r24	; 0x04
 3da:	8d 83       	std	Y+5, r24	; 0x05
 3dc:	90 ef       	ldi	r25, 0xF0	; 240
 3de:	9e 83       	std	Y+6, r25	; 0x06
 3e0:	8f 83       	std	Y+7, r24	; 0x07
 3e2:	2f c0       	rjmp	.+94     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	six					   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  6 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b00011111; break;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	8b 83       	std	Y+3, r24	; 0x03
 3e8:	8c 83       	std	Y+4, r24	; 0x04
 3ea:	8d 83       	std	Y+5, r24	; 0x05
 3ec:	8e 83       	std	Y+6, r24	; 0x06
 3ee:	8f e1       	ldi	r24, 0x1F	; 31
 3f0:	8f 83       	std	Y+7, r24	; 0x07
 3f2:	27 c0       	rjmp	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	seven				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  7 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11100000; break;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	8b 83       	std	Y+3, r24	; 0x03
 3f8:	8c 83       	std	Y+4, r24	; 0x04
 3fa:	8d 83       	std	Y+5, r24	; 0x05
 3fc:	8e 83       	std	Y+6, r24	; 0x06
 3fe:	80 ee       	ldi	r24, 0xE0	; 224
 400:	8f 83       	std	Y+7, r24	; 0x07
 402:	1f c0       	rjmp	.+62     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	eight				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  8 : line_data[3] = 0b11100000; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 404:	80 ee       	ldi	r24, 0xE0	; 224
 406:	8b 83       	std	Y+3, r24	; 0x03
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	8c 83       	std	Y+4, r24	; 0x04
 40c:	8d 83       	std	Y+5, r24	; 0x05
 40e:	8e 83       	std	Y+6, r24	; 0x06
 410:	8f 83       	std	Y+7, r24	; 0x07
 412:	17 c0       	rjmp	.+46     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	nine				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case  9 : line_data[3] = 0b00001111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 414:	8f e0       	ldi	r24, 0x0F	; 15
 416:	8b 83       	std	Y+3, r24	; 0x03
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	8c 83       	std	Y+4, r24	; 0x04
 41c:	8d 83       	std	Y+5, r24	; 0x05
 41e:	8e 83       	std	Y+6, r24	; 0x06
 420:	8f 83       	std	Y+7, r24	; 0x07
 422:	0f c0       	rjmp	.+30     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	ten					   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case 10 : line_data[3] = 0b11111110; line_data[4] = 0b11111110; line_data[5] = 0b11111110; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 424:	8e ef       	ldi	r24, 0xFE	; 254
 426:	8b 83       	std	Y+3, r24	; 0x03
 428:	8c 83       	std	Y+4, r24	; 0x04
 42a:	8d 83       	std	Y+5, r24	; 0x05
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	8e 83       	std	Y+6, r24	; 0x06
 430:	8f 83       	std	Y+7, r24	; 0x07
 432:	07 c0       	rjmp	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		
		// 	eleven				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
	case 11 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11000000; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	8b 83       	std	Y+3, r24	; 0x03
 438:	8c 83       	std	Y+4, r24	; 0x04
 43a:	90 ec       	ldi	r25, 0xC0	; 192
 43c:	9d 83       	std	Y+5, r25	; 0x05
 43e:	8e 83       	std	Y+6, r24	; 0x06
 440:	8f 83       	std	Y+7, r24	; 0x07
	}
}
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <display>:

void display(uint8_t *line_data, uint16_t number_of_loops)
{
 448:	2f 92       	push	r2
 44a:	3f 92       	push	r3
 44c:	4f 92       	push	r4
 44e:	5f 92       	push	r5
 450:	6f 92       	push	r6
 452:	7f 92       	push	r7
 454:	8f 92       	push	r8
 456:	9f 92       	push	r9
 458:	af 92       	push	r10
 45a:	bf 92       	push	r11
 45c:	cf 92       	push	r12
 45e:	df 92       	push	r13
 460:	ef 92       	push	r14
 462:	ff 92       	push	r15
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	28 97       	sbiw	r28, 0x08	; 8
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
 47c:	2b 01       	movw	r4, r22
 47e:	3c 01       	movw	r6, r24
 480:	1e 01       	movw	r2, r28
 482:	89 e0       	ldi	r24, 0x09	; 9
 484:	28 0e       	add	r2, r24
 486:	31 1c       	adc	r3, r1
 488:	fe 01       	movw	r30, r28
 48a:	31 96       	adiw	r30, 0x01	; 1
 48c:	4f 01       	movw	r8, r30
	uint8_t i, temp, temprev[8];				// 8 bits variables declaration
	uint16_t y;									// 16 bits variables declaration
	
	for(i=0; i<8; i++)							// For hardware pin mapping reason, reverse each byte of data (8 bytes, 1 byte per line and 1 bit per column )
	{	
		temprev[i] = (line_data[i] * 0x0202020202ULL & 0x010884422010ULL) % 1023;   // Reverse binary (0bABCDEFGH --> 0bHGFEDCBA)
 48e:	f3 01       	movw	r30, r6
 490:	21 91       	ld	r18, Z+
 492:	3f 01       	movw	r6, r30
 494:	68 94       	set
 496:	aa 24       	eor	r10, r10
 498:	a1 f8       	bld	r10, 1
 49a:	68 94       	set
 49c:	bb 24       	eor	r11, r11
 49e:	b1 f8       	bld	r11, 1
 4a0:	68 94       	set
 4a2:	cc 24       	eor	r12, r12
 4a4:	c1 f8       	bld	r12, 1
 4a6:	68 94       	set
 4a8:	dd 24       	eor	r13, r13
 4aa:	d1 f8       	bld	r13, 1
 4ac:	68 94       	set
 4ae:	ee 24       	eor	r14, r14
 4b0:	e1 f8       	bld	r14, 1
 4b2:	f1 2c       	mov	r15, r1
 4b4:	00 e0       	ldi	r16, 0x00	; 0
 4b6:	10 e0       	ldi	r17, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__muldi3>
 4ca:	20 71       	andi	r18, 0x10	; 16
 4cc:	30 72       	andi	r19, 0x20	; 32
 4ce:	42 74       	andi	r20, 0x42	; 66
 4d0:	54 78       	andi	r21, 0x84	; 132
 4d2:	68 70       	andi	r22, 0x08	; 8
 4d4:	71 70       	andi	r23, 0x01	; 1
 4d6:	aa 24       	eor	r10, r10
 4d8:	aa 94       	dec	r10
 4da:	0f 2e       	mov	r0, r31
 4dc:	f3 e0       	ldi	r31, 0x03	; 3
 4de:	bf 2e       	mov	r11, r31
 4e0:	f0 2d       	mov	r31, r0
 4e2:	c1 2c       	mov	r12, r1
 4e4:	d1 2c       	mov	r13, r1
 4e6:	e1 2c       	mov	r14, r1
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 88 06 	call	0xd10	; 0xd10 <__umoddi3>
 4f0:	f4 01       	movw	r30, r8
 4f2:	21 93       	st	Z+, r18
 4f4:	4f 01       	movw	r8, r30
void display(uint8_t *line_data, uint16_t number_of_loops)
{
	uint8_t i, temp, temprev[8];				// 8 bits variables declaration
	uint16_t y;									// 16 bits variables declaration
	
	for(i=0; i<8; i++)							// For hardware pin mapping reason, reverse each byte of data (8 bytes, 1 byte per line and 1 bit per column )
 4f6:	e2 15       	cp	r30, r2
 4f8:	f3 05       	cpc	r31, r3
 4fa:	49 f6       	brne	.-110    	; 0x48e <display+0x46>
	{	
		temprev[i] = (line_data[i] * 0x0202020202ULL & 0x010884422010ULL) % 1023;   // Reverse binary (0bABCDEFGH --> 0bHGFEDCBA)
	}
	
	for(y=0; y<number_of_loops; y++)			// Loop multiplexing
 4fc:	41 14       	cp	r4, r1
 4fe:	51 04       	cpc	r5, r1
 500:	09 f0       	breq	.+2      	; 0x504 <display+0xbc>
 502:	82 c0       	rjmp	.+260    	; 0x608 <display+0x1c0>
 504:	89 c0       	rjmp	.+274    	; 0x618 <display+0x1d0>
 506:	da 01       	movw	r26, r20
	{
		for(i=0; i<8; i++)						// For each line
		{
			temp = temprev[i] & 0b00011111;		// Only the 5 LSB are needed
 508:	fa 01       	movw	r30, r20
 50a:	91 91       	ld	r25, Z+
 50c:	af 01       	movw	r20, r30
 50e:	9f 71       	andi	r25, 0x1F	; 31
			PORTB &= 0b11100000;				// Clear the 5 LSB of PORTB
 510:	e8 b3       	in	r30, 0x18	; 24
 512:	e0 7e       	andi	r30, 0xE0	; 224
 514:	e8 bb       	out	0x18, r30	; 24
			PORTB |= temp;						// Set the 5 LSB of PORTB to line_data according to schematics
 516:	e8 b3       	in	r30, 0x18	; 24
 518:	9e 2b       	or	r25, r30
 51a:	98 bb       	out	0x18, r25	; 24
			
			temp = temprev[i]>>5;				// Shift 5 times to the right, to keep only the 3 MSB
 51c:	9c 91       	ld	r25, X
 51e:	92 95       	swap	r25
 520:	96 95       	lsr	r25
 522:	97 70       	andi	r25, 0x07	; 7
			temp = temp<<4;						// Shift 4 times to the left
			PORTA &= 0b10001111;				// Clear the needed bits of PORTA
 524:	eb b3       	in	r30, 0x1b	; 27
 526:	ef 78       	andi	r30, 0x8F	; 143
 528:	eb bb       	out	0x1b, r30	; 27
			PORTA |= temp;						// Set the needed bits of PORTA to line_data according to schematics
 52a:	eb b3       	in	r30, 0x1b	; 27
 52c:	92 95       	swap	r25
 52e:	90 7f       	andi	r25, 0xF0	; 240
 530:	9e 2b       	or	r25, r30
 532:	9b bb       	out	0x1b, r25	; 27
			
			switch(i)							// Give power to one line at each time (5v to line number i LED anodes)
 534:	82 2f       	mov	r24, r18
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	2f 5f       	subi	r18, 0xFF	; 255
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
 53c:	88 30       	cpi	r24, 0x08	; 8
 53e:	91 05       	cpc	r25, r1
 540:	08 f0       	brcs	.+2      	; 0x544 <display+0xfc>
 542:	53 c0       	rjmp	.+166    	; 0x5ea <display+0x1a2>
 544:	fc 01       	movw	r30, r24
 546:	ee 58       	subi	r30, 0x8E	; 142
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__tablejump2__>
			{
			case 0 : PORTC |=  (1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 54e:	af 9a       	sbi	0x15, 7	; 21
 550:	ae 98       	cbi	0x15, 6	; 21
 552:	ad 98       	cbi	0x15, 5	; 21
 554:	ac 98       	cbi	0x15, 4	; 21
 556:	d8 98       	cbi	0x1b, 0	; 27
 558:	d9 98       	cbi	0x1b, 1	; 27
 55a:	da 98       	cbi	0x1b, 2	; 27
 55c:	db 98       	cbi	0x1b, 3	; 27
 55e:	6b c0       	rjmp	.+214    	; 0x636 <display+0x1ee>
			case 1 : PORTC &= ~(1<<7); PORTC |=  (1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 560:	af 98       	cbi	0x15, 7	; 21
 562:	ae 9a       	sbi	0x15, 6	; 21
 564:	ad 98       	cbi	0x15, 5	; 21
 566:	ac 98       	cbi	0x15, 4	; 21
 568:	d8 98       	cbi	0x1b, 0	; 27
 56a:	d9 98       	cbi	0x1b, 1	; 27
 56c:	da 98       	cbi	0x1b, 2	; 27
 56e:	db 98       	cbi	0x1b, 3	; 27
 570:	62 c0       	rjmp	.+196    	; 0x636 <display+0x1ee>
			case 2 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC |=  (1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 572:	af 98       	cbi	0x15, 7	; 21
 574:	ae 98       	cbi	0x15, 6	; 21
 576:	ad 9a       	sbi	0x15, 5	; 21
 578:	ac 98       	cbi	0x15, 4	; 21
 57a:	d8 98       	cbi	0x1b, 0	; 27
 57c:	d9 98       	cbi	0x1b, 1	; 27
 57e:	da 98       	cbi	0x1b, 2	; 27
 580:	db 98       	cbi	0x1b, 3	; 27
 582:	59 c0       	rjmp	.+178    	; 0x636 <display+0x1ee>
			case 3 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC |=  (1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 584:	af 98       	cbi	0x15, 7	; 21
 586:	ae 98       	cbi	0x15, 6	; 21
 588:	ad 98       	cbi	0x15, 5	; 21
 58a:	ac 9a       	sbi	0x15, 4	; 21
 58c:	d8 98       	cbi	0x1b, 0	; 27
 58e:	d9 98       	cbi	0x1b, 1	; 27
 590:	da 98       	cbi	0x1b, 2	; 27
 592:	db 98       	cbi	0x1b, 3	; 27
 594:	50 c0       	rjmp	.+160    	; 0x636 <display+0x1ee>
			case 4 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA |=  (1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 596:	af 98       	cbi	0x15, 7	; 21
 598:	ae 98       	cbi	0x15, 6	; 21
 59a:	ad 98       	cbi	0x15, 5	; 21
 59c:	ac 98       	cbi	0x15, 4	; 21
 59e:	d8 9a       	sbi	0x1b, 0	; 27
 5a0:	d9 98       	cbi	0x1b, 1	; 27
 5a2:	da 98       	cbi	0x1b, 2	; 27
 5a4:	db 98       	cbi	0x1b, 3	; 27
 5a6:	47 c0       	rjmp	.+142    	; 0x636 <display+0x1ee>
			case 5 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA |=  (1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 5a8:	af 98       	cbi	0x15, 7	; 21
 5aa:	ae 98       	cbi	0x15, 6	; 21
 5ac:	ad 98       	cbi	0x15, 5	; 21
 5ae:	ac 98       	cbi	0x15, 4	; 21
 5b0:	d8 98       	cbi	0x1b, 0	; 27
 5b2:	d9 9a       	sbi	0x1b, 1	; 27
 5b4:	da 98       	cbi	0x1b, 2	; 27
 5b6:	db 98       	cbi	0x1b, 3	; 27
 5b8:	3e c0       	rjmp	.+124    	; 0x636 <display+0x1ee>
			case 6 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA |=  (1<<2); PORTA &= ~(1<<3); break;
 5ba:	af 98       	cbi	0x15, 7	; 21
 5bc:	ae 98       	cbi	0x15, 6	; 21
 5be:	ad 98       	cbi	0x15, 5	; 21
 5c0:	ac 98       	cbi	0x15, 4	; 21
 5c2:	d8 98       	cbi	0x1b, 0	; 27
 5c4:	d9 98       	cbi	0x1b, 1	; 27
 5c6:	da 9a       	sbi	0x1b, 2	; 27
 5c8:	db 98       	cbi	0x1b, 3	; 27
 5ca:	35 c0       	rjmp	.+106    	; 0x636 <display+0x1ee>
			case 7 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA |=  (1<<3); break;
 5cc:	af 98       	cbi	0x15, 7	; 21
 5ce:	ae 98       	cbi	0x15, 6	; 21
 5d0:	ad 98       	cbi	0x15, 5	; 21
 5d2:	ac 98       	cbi	0x15, 4	; 21
 5d4:	d8 98       	cbi	0x1b, 0	; 27
 5d6:	d9 98       	cbi	0x1b, 1	; 27
 5d8:	da 98       	cbi	0x1b, 2	; 27
 5da:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5dc:	89 ef       	ldi	r24, 0xF9	; 249
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <display+0x198>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <display+0x19e>
 5e6:	00 00       	nop
 5e8:	09 c0       	rjmp	.+18     	; 0x5fc <display+0x1b4>
 5ea:	e9 ef       	ldi	r30, 0xF9	; 249
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	31 97       	sbiw	r30, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <display+0x1a6>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <display+0x1ac>
 5f4:	00 00       	nop
		temprev[i] = (line_data[i] * 0x0202020202ULL & 0x010884422010ULL) % 1023;   // Reverse binary (0bABCDEFGH --> 0bHGFEDCBA)
	}
	
	for(y=0; y<number_of_loops; y++)			// Loop multiplexing
	{
		for(i=0; i<8; i++)						// For each line
 5f6:	28 30       	cpi	r18, 0x08	; 8
 5f8:	08 f4       	brcc	.+2      	; 0x5fc <display+0x1b4>
 5fa:	85 cf       	rjmp	.-246    	; 0x506 <display+0xbe>
	for(i=0; i<8; i++)							// For hardware pin mapping reason, reverse each byte of data (8 bytes, 1 byte per line and 1 bit per column )
	{	
		temprev[i] = (line_data[i] * 0x0202020202ULL & 0x010884422010ULL) % 1023;   // Reverse binary (0bABCDEFGH --> 0bHGFEDCBA)
	}
	
	for(y=0; y<number_of_loops; y++)			// Loop multiplexing
 5fc:	6f 5f       	subi	r22, 0xFF	; 255
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	46 16       	cp	r4, r22
 602:	57 06       	cpc	r5, r23
 604:	19 f4       	brne	.+6      	; 0x60c <display+0x1c4>
 606:	08 c0       	rjmp	.+16     	; 0x618 <display+0x1d0>
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	70 e0       	ldi	r23, 0x00	; 0
	case 11 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11000000; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
	}
}

void display(uint8_t *line_data, uint16_t number_of_loops)
{
 60c:	ae 01       	movw	r20, r28
 60e:	4f 5f       	subi	r20, 0xFF	; 255
 610:	5f 4f       	sbci	r21, 0xFF	; 255
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	77 cf       	rjmp	.-274    	; 0x506 <display+0xbe>
			}
			_delay_ms(1);						// 1ms delay between each line = multiplexing at 1/(8*0.001s) = 125Hz
		}
		// 8ms passed, do it again 1250 times to display for 10s
	}
	PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); // Display is OFF
 618:	af 98       	cbi	0x15, 7	; 21
 61a:	ae 98       	cbi	0x15, 6	; 21
 61c:	ad 98       	cbi	0x15, 5	; 21
 61e:	ac 98       	cbi	0x15, 4	; 21
 620:	d8 98       	cbi	0x1b, 0	; 27
 622:	d9 98       	cbi	0x1b, 1	; 27
 624:	da 98       	cbi	0x1b, 2	; 27
 626:	db 98       	cbi	0x1b, 3	; 27
	PORTB &= 0b11100000;						// Display is OFF
 628:	88 b3       	in	r24, 0x18	; 24
 62a:	80 7e       	andi	r24, 0xE0	; 224
 62c:	88 bb       	out	0x18, r24	; 24
	PORTA &= 0b10001111;						// Display is OFF
 62e:	8b b3       	in	r24, 0x1b	; 27
 630:	8f 78       	andi	r24, 0x8F	; 143
 632:	8b bb       	out	0x1b, r24	; 27
}
 634:	07 c0       	rjmp	.+14     	; 0x644 <display+0x1fc>
 636:	89 ef       	ldi	r24, 0xF9	; 249
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <display+0x1f2>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <display+0x1f8>
 640:	00 00       	nop
 642:	61 cf       	rjmp	.-318    	; 0x506 <display+0xbe>
 644:	28 96       	adiw	r28, 0x08	; 8
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	0f 91       	pop	r16
 658:	ff 90       	pop	r15
 65a:	ef 90       	pop	r14
 65c:	df 90       	pop	r13
 65e:	cf 90       	pop	r12
 660:	bf 90       	pop	r11
 662:	af 90       	pop	r10
 664:	9f 90       	pop	r9
 666:	8f 90       	pop	r8
 668:	7f 90       	pop	r7
 66a:	6f 90       	pop	r6
 66c:	5f 90       	pop	r5
 66e:	4f 90       	pop	r4
 670:	3f 90       	pop	r3
 672:	2f 90       	pop	r2
 674:	08 95       	ret

00000676 <sleep>:

void sleep()
{
	PORTD |= (1<<PD4);							// Turn OFF LED on PD4 (output 5v to LED cathode)
 676:	94 9a       	sbi	0x12, 4	; 18
	
	ACSR |= (1<<ACD);          					// Disable Analog comparator	
 678:	47 9a       	sbi	0x08, 7	; 8
	
	GICR |= (1<<INT1);							// Enable interrupt	INT1
 67a:	8b b7       	in	r24, 0x3b	; 59
 67c:	80 68       	ori	r24, 0x80	; 128
 67e:	8b bf       	out	0x3b, r24	; 59
	MCUCR &= ~((1<<ISC11) | (1<<ISC10));		// Enable interrupt on low level of INT1 (only compatible mode with sleep mode wake up on INT1)
 680:	85 b7       	in	r24, 0x35	; 53
 682:	83 7f       	andi	r24, 0xF3	; 243
 684:	85 bf       	out	0x35, r24	; 53
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);   	 	// Set sleep mode to "power down mode"
 686:	85 b7       	in	r24, 0x35	; 53
 688:	8f 78       	andi	r24, 0x8F	; 143
 68a:	80 62       	ori	r24, 0x20	; 32
 68c:	85 bf       	out	0x35, r24	; 53
	sleep_enable();                        		// Sets the Sleep Enable bit in the MCUCR Register (SE BIT)
 68e:	85 b7       	in	r24, 0x35	; 53
 690:	80 68       	ori	r24, 0x80	; 128
 692:	85 bf       	out	0x35, r24	; 53
	sei();                                 		// Enable interrupts
 694:	78 94       	sei
	sleep_cpu();                           		// sleep
 696:	88 95       	sleep

	//...Wait for interrupt to wake-up MCU...
	
	// Interruption occurred : ISR(INT1_vect) is called
	
	cli();                                  	// Disable interrupts
 698:	f8 94       	cli
	sleep_disable();                        	// Clear Sleep Enable bit (SE bit)
 69a:	85 b7       	in	r24, 0x35	; 53
 69c:	8f 77       	andi	r24, 0x7F	; 127
 69e:	85 bf       	out	0x35, r24	; 53
 6a0:	08 95       	ret

000006a2 <__vector_2>:
}

ISR(INT1_vect)									// Interrupt service routine
{
 6a2:	1f 92       	push	r1
 6a4:	0f 92       	push	r0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	8f 93       	push	r24
	if (setmode)								// If user is changing the time
 6ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <setmode>
 6b2:	88 23       	and	r24, r24
 6b4:	31 f0       	breq	.+12     	; 0x6c2 <__vector_2+0x20>
	{
		time_counter=0;							// Reset time counter, allowing 5 more seconds to change the time before returning to sleep mode
 6b6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <time_counter>
		bt_flag = 1;							// Set button flag to 1, to change time
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <__vector_2+0x26>
	} 
	else										// If the interruption occurred during sleep mode
	{
		sleep_disable();						// When interruption occurred, disable sleep mode (and so wake MCU up)
 6c2:	85 b7       	in	r24, 0x35	; 53
 6c4:	8f 77       	andi	r24, 0x7F	; 127
 6c6:	85 bf       	out	0x35, r24	; 53
	}
}
 6c8:	8f 91       	pop	r24
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <io_setup>:

void io_setup()
{
	DDRA = 0x7F;								// PORTA as output except PA7 as input
 6d4:	8f e7       	ldi	r24, 0x7F	; 127
 6d6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;								// PORTB as output
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFC;								// PORTC as output
 6dc:	8c ef       	ldi	r24, 0xFC	; 252
 6de:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x14;								// PD3 as input, PD4 and PD2 as outputs
 6e0:	84 e1       	ldi	r24, 0x14	; 20
 6e2:	81 bb       	out	0x11, r24	; 17
	
	PORTA = 0x00;								// All outputs low
 6e4:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;								// All outputs low
 6e6:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;								// All outputs low
 6e8:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x10;								// All outputs low except PD4 (led OFF)
 6ea:	80 e1       	ldi	r24, 0x10	; 16
 6ec:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<PD3);							// Enable pullup on PD3
 6ee:	93 9a       	sbi	0x12, 3	; 18
 6f0:	08 95       	ret

000006f2 <check_battery>:
}

void check_battery(uint8_t *lowbat, uint8_t *critbat)
{
 6f2:	cf 92       	push	r12
 6f4:	df 92       	push	r13
 6f6:	ef 92       	push	r14
 6f8:	ff 92       	push	r15
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	ec 01       	movw	r28, r24
 704:	8b 01       	movw	r16, r22
	float adcvalue, voltage;					// Variables declaration
	
	ADMUX = 0x47;								// Select ADC7 and reference voltage on AVCC (with capacitor to GND at AREF pin)
 706:	87 e4       	ldi	r24, 0x47	; 71
 708:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);			// ADC clock prescaler /8
 70a:	86 b1       	in	r24, 0x06	; 6
 70c:	83 60       	ori	r24, 0x03	; 3
 70e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);						// Enable ADC
 710:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);						// Start ADC conversion
 712:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_clear(ADCSRA, ADSC); 		// Wait until done
 714:	36 99       	sbic	0x06, 6	; 6
 716:	fe cf       	rjmp	.-4      	; 0x714 <check_battery+0x22>
	adcvalue = ADC;								// Read ADC
 718:	64 b1       	in	r22, 0x04	; 4
 71a:	75 b1       	in	r23, 0x05	; 5
	ADCSRA &= ~(1<<ADEN);      					// Disable ADC
 71c:	37 98       	cbi	0x06, 7	; 6
	
	voltage = adcvalue*3.3*43/1023/33;			// Actual battery voltage
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 0a 05 	call	0xa14	; 0xa14 <__floatunsisf>
 726:	23 e3       	ldi	r18, 0x33	; 51
 728:	33 e3       	ldi	r19, 0x33	; 51
 72a:	43 e5       	ldi	r20, 0x53	; 83
 72c:	50 e4       	ldi	r21, 0x40	; 64
 72e:	0e 94 bc 05 	call	0xb78	; 0xb78 <__mulsf3>
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	4c e2       	ldi	r20, 0x2C	; 44
 738:	52 e4       	ldi	r21, 0x42	; 66
 73a:	0e 94 bc 05 	call	0xb78	; 0xb78 <__mulsf3>
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	30 ec       	ldi	r19, 0xC0	; 192
 742:	4f e7       	ldi	r20, 0x7F	; 127
 744:	54 e4       	ldi	r21, 0x44	; 68
 746:	0e 94 98 04 	call	0x930	; 0x930 <__divsf3>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	44 e0       	ldi	r20, 0x04	; 4
 750:	52 e4       	ldi	r21, 0x42	; 66
 752:	0e 94 98 04 	call	0x930	; 0x930 <__divsf3>
 756:	6b 01       	movw	r12, r22
 758:	7c 01       	movw	r14, r24
	
	if(voltage < V_LOWBAT) *lowbat = 1;			// If battery level is low, rise a corresponding flag
 75a:	2a e9       	ldi	r18, 0x9A	; 154
 75c:	39 e9       	ldi	r19, 0x99	; 153
 75e:	49 e5       	ldi	r20, 0x59	; 89
 760:	50 e4       	ldi	r21, 0x40	; 64
 762:	0e 94 93 04 	call	0x926	; 0x926 <__cmpsf2>
 766:	88 23       	and	r24, r24
 768:	1c f4       	brge	.+6      	; 0x770 <check_battery+0x7e>
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	88 83       	st	Y, r24
 76e:	01 c0       	rjmp	.+2      	; 0x772 <check_battery+0x80>
	else *lowbat = 0;
 770:	18 82       	st	Y, r1
	
	if(voltage < V_CRITBAT) *critbat = 1;		// If battery level is critical, rise a corresponding flag
 772:	23 e3       	ldi	r18, 0x33	; 51
 774:	33 e3       	ldi	r19, 0x33	; 51
 776:	43 e5       	ldi	r20, 0x53	; 83
 778:	50 e4       	ldi	r21, 0x40	; 64
 77a:	c7 01       	movw	r24, r14
 77c:	b6 01       	movw	r22, r12
 77e:	0e 94 93 04 	call	0x926	; 0x926 <__cmpsf2>
 782:	88 23       	and	r24, r24
 784:	24 f4       	brge	.+8      	; 0x78e <check_battery+0x9c>
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	f8 01       	movw	r30, r16
 78a:	80 83       	st	Z, r24
 78c:	02 c0       	rjmp	.+4      	; 0x792 <check_battery+0xa0>
	else *critbat = 0;
 78e:	f8 01       	movw	r30, r16
 790:	10 82       	st	Z, r1
}
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	1f 91       	pop	r17
 798:	0f 91       	pop	r16
 79a:	ff 90       	pop	r15
 79c:	ef 90       	pop	r14
 79e:	df 90       	pop	r13
 7a0:	cf 90       	pop	r12
 7a2:	08 95       	ret

000007a4 <main>:
uint8_t time_counter=0;							// ...
uint8_t bt_flag=0;								// ...To be used by the ISR

// Main program
int main()
{
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
 7ac:	2e 97       	sbiw	r28, 0x0e	; 14
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	cd bf       	out	0x3d, r28	; 61
	uint8_t hour, min, sec, am_pm, data[8]={0}, low_battery=0, critical_battery=0, i;	// 8 bits variables declaration
 7b8:	fe 01       	movw	r30, r28
 7ba:	35 96       	adiw	r30, 0x05	; 5
 7bc:	88 e0       	ldi	r24, 0x08	; 8
 7be:	df 01       	movw	r26, r30
 7c0:	1d 92       	st	X+, r1
 7c2:	8a 95       	dec	r24
 7c4:	e9 f7       	brne	.-6      	; 0x7c0 <main+0x1c>
 7c6:	1d 86       	std	Y+13, r1	; 0x0d
 7c8:	1e 86       	std	Y+14, r1	; 0x0e

	io_setup();									// Configure the MCU's GPIO
 7ca:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <io_setup>
	
	PORTD |= (1<<PD2);							// Give power to RTC
 7ce:	92 9a       	sbi	0x12, 2	; 18
	i2c_init();									// Initialize I2C communication
 7d0:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_init>
	PORTD &= ~(1<<PD2);							// Cut power to RTC	
 7d4:	92 98       	cbi	0x12, 2	; 18
			if (bit_is_clear(PIND,PD3))			// If button is still pressed
			{
				MCUCR |= (1<<ISC11);			// ...
				MCUCR &= ~(1<<ISC10);			// ... Enable interrupt on falling edge of INT1
				sei();                         	// Enable interrupts
				setmode=1;						// Go to setmode
 7d6:	ff 24       	eor	r15, r15
 7d8:	f3 94       	inc	r15
				{
					if (bt_flag)
					{
						bt_flag=0;				// Reset button flag
						min=min-min%5;			// Set min to nearest 5min step
						min+=5;					// Increase minutes by 5 on button press
 7da:	0d ec       	ldi	r16, 0xCD	; 205
		
		if(critical_battery)					// if battery level is critical, blink a LED ON and OFF and don't run the program
		{
			for(i=0; i<10; i++)					// Number of LED blinks
			{
				PORTD ^= (1<<PD4);				// Invert output state of PD4 (connected to LED cathode)
 7dc:	10 e1       	ldi	r17, 0x10	; 16
	i2c_init();									// Initialize I2C communication
	PORTD &= ~(1<<PD2);							// Cut power to RTC	
		
	while (1)
	{
		sleep();
 7de:	0e 94 3b 03 	call	0x676	; 0x676 <sleep>
		
		check_battery(&low_battery, &critical_battery);
 7e2:	be 01       	movw	r22, r28
 7e4:	62 5f       	subi	r22, 0xF2	; 242
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	ce 01       	movw	r24, r28
 7ea:	0d 96       	adiw	r24, 0x0d	; 13
 7ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <check_battery>
		
		if(low_battery) PORTD &= ~(1<<PD4);		// if battery level is low, turn ON a LED and run the program
 7f0:	8d 85       	ldd	r24, Y+13	; 0x0d
 7f2:	88 23       	and	r24, r24
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <main+0x54>
 7f6:	93 c0       	rjmp	.+294    	; 0x91e <__stack+0xbf>
 7f8:	94 98       	cbi	0x12, 4	; 18
		
		if(critical_battery)					// if battery level is critical, blink a LED ON and OFF and don't run the program
 7fa:	8e 85       	ldd	r24, Y+14	; 0x0e
 7fc:	88 23       	and	r24, r24
 7fe:	71 f0       	breq	.+28     	; 0x81c <main+0x78>
uint8_t time_counter=0;							// ...
uint8_t bt_flag=0;								// ...To be used by the ISR

// Main program
int main()
{
 800:	9a e0       	ldi	r25, 0x0A	; 10
		
		if(critical_battery)					// if battery level is critical, blink a LED ON and OFF and don't run the program
		{
			for(i=0; i<10; i++)					// Number of LED blinks
			{
				PORTD ^= (1<<PD4);				// Invert output state of PD4 (connected to LED cathode)
 802:	82 b3       	in	r24, 0x12	; 18
 804:	81 27       	eor	r24, r17
 806:	82 bb       	out	0x12, r24	; 18
 808:	e3 e2       	ldi	r30, 0x23	; 35
 80a:	f4 ef       	ldi	r31, 0xF4	; 244
 80c:	31 97       	sbiw	r30, 0x01	; 1
 80e:	f1 f7       	brne	.-4      	; 0x80c <main+0x68>
 810:	00 c0       	rjmp	.+0      	; 0x812 <main+0x6e>
 812:	00 00       	nop
 814:	91 50       	subi	r25, 0x01	; 1
		
		if(low_battery) PORTD &= ~(1<<PD4);		// if battery level is low, turn ON a LED and run the program
		
		if(critical_battery)					// if battery level is critical, blink a LED ON and OFF and don't run the program
		{
			for(i=0; i<10; i++)					// Number of LED blinks
 816:	a9 f7       	brne	.-22     	; 0x802 <main+0x5e>
			{
				PORTD ^= (1<<PD4);				// Invert output state of PD4 (connected to LED cathode)
				_delay_ms(250);					// Wait 250ms
			}
			PORTD |= (1<<PD4);					// Turn OFF LED (output 5v to LED cathode)
 818:	94 9a       	sbi	0x12, 4	; 18
 81a:	e1 cf       	rjmp	.-62     	; 0x7de <main+0x3a>
		}
		else									// If battery level is good
		{
			PORTD |= (1<<PD2);					// Give power to RTC
 81c:	92 9a       	sbi	0x12, 2	; 18
			i2c_init();							// Initialize I2C communication
 81e:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_init>
			rtc_get_time_12h(&hour, &min, &sec, &am_pm);	// Get time
 822:	9e 01       	movw	r18, r28
 824:	2c 5f       	subi	r18, 0xFC	; 252
 826:	3f 4f       	sbci	r19, 0xFF	; 255
 828:	ae 01       	movw	r20, r28
 82a:	4d 5f       	subi	r20, 0xFD	; 253
 82c:	5f 4f       	sbci	r21, 0xFF	; 255
 82e:	be 01       	movw	r22, r28
 830:	6e 5f       	subi	r22, 0xFE	; 254
 832:	7f 4f       	sbci	r23, 0xFF	; 255
 834:	ce 01       	movw	r24, r28
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	0e 94 15 01 	call	0x22a	; 0x22a <rtc_get_time_12h>
			PORTD &= ~(1<<PD2);					// Cut power to RTC
 83c:	92 98       	cbi	0x12, 2	; 18
			
			minutes_to_matrix(min, data);		// Convert minutes to the data array to be displayed on the LED matrix
 83e:	be 01       	movw	r22, r28
 840:	6b 5f       	subi	r22, 0xFB	; 251
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	0e 94 53 01 	call	0x2a6	; 0x2a6 <minutes_to_matrix>
			if(min>35)hour++;					// If minutes are more than half an hour, then add an hour to the display
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
 84c:	84 32       	cpi	r24, 0x24	; 36
 84e:	18 f0       	brcs	.+6      	; 0x856 <main+0xb2>
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	8f 5f       	subi	r24, 0xFF	; 255
 854:	89 83       	std	Y+1, r24	; 0x01
			hours_to_matrix(hour, data);		// Convert hours to the data array to be displayed on the LED matrix
 856:	be 01       	movw	r22, r28
 858:	6b 5f       	subi	r22, 0xFB	; 251
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	0e 94 b4 01 	call	0x368	; 0x368 <hours_to_matrix>
			display(data, 1000);					// Display the data array for 10s (1251)
 862:	68 ee       	ldi	r22, 0xE8	; 232
 864:	73 e0       	ldi	r23, 0x03	; 3
 866:	ce 01       	movw	r24, r28
 868:	05 96       	adiw	r24, 0x05	; 5
 86a:	0e 94 24 02 	call	0x448	; 0x448 <display>
			
			if (bit_is_clear(PIND,PD3))			// If button is still pressed
 86e:	83 99       	sbic	0x10, 3	; 16
 870:	b6 cf       	rjmp	.-148    	; 0x7de <main+0x3a>
			{
				MCUCR |= (1<<ISC11);			// ...
 872:	85 b7       	in	r24, 0x35	; 53
 874:	88 60       	ori	r24, 0x08	; 8
 876:	85 bf       	out	0x35, r24	; 53
				MCUCR &= ~(1<<ISC10);			// ... Enable interrupt on falling edge of INT1
 878:	85 b7       	in	r24, 0x35	; 53
 87a:	8b 7f       	andi	r24, 0xFB	; 251
 87c:	85 bf       	out	0x35, r24	; 53
				sei();                         	// Enable interrupts
 87e:	78 94       	sei
				setmode=1;						// Go to setmode
 880:	f0 92 62 00 	sts	0x0062, r15	; 0x800062 <setmode>
				
				for (time_counter=0;time_counter<20;time_counter++) // Blink several times
 884:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <time_counter>
				{
					if (bt_flag)
 888:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 88c:	88 23       	and	r24, r24
 88e:	e1 f0       	breq	.+56     	; 0x8c8 <__stack+0x69>
					{
						bt_flag=0;				// Reset button flag
 890:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
						min=min-min%5;			// Set min to nearest 5min step
 894:	8a 81       	ldd	r24, Y+2	; 0x02
						min+=5;					// Increase minutes by 5 on button press
 896:	80 9f       	mul	r24, r16
 898:	81 2d       	mov	r24, r1
 89a:	11 24       	eor	r1, r1
 89c:	86 95       	lsr	r24
 89e:	86 95       	lsr	r24
 8a0:	98 2f       	mov	r25, r24
 8a2:	99 0f       	add	r25, r25
 8a4:	99 0f       	add	r25, r25
 8a6:	89 0f       	add	r24, r25
 8a8:	8b 5f       	subi	r24, 0xFB	; 251
 8aa:	8a 83       	std	Y+2, r24	; 0x02
						if (min>=60)min=0;		// Handle minutes overflow
 8ac:	8c 33       	cpi	r24, 0x3C	; 60
 8ae:	10 f0       	brcs	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	1a 82       	std	Y+2, r1	; 0x02
 8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <__stack+0x61>
						if ((min>=35) && (min<40))hour++; // Increase hour
 8b4:	83 52       	subi	r24, 0x23	; 35
 8b6:	85 30       	cpi	r24, 0x05	; 5
 8b8:	18 f4       	brcc	.+6      	; 0x8c0 <__stack+0x61>
 8ba:	89 81       	ldd	r24, Y+1	; 0x01
 8bc:	8f 5f       	subi	r24, 0xFF	; 255
 8be:	89 83       	std	Y+1, r24	; 0x01
						if (hour>=12)hour=0;	// Handle hour overflow
 8c0:	89 81       	ldd	r24, Y+1	; 0x01
 8c2:	8c 30       	cpi	r24, 0x0C	; 12
 8c4:	08 f0       	brcs	.+2      	; 0x8c8 <__stack+0x69>
 8c6:	19 82       	std	Y+1, r1	; 0x01
					}
					minutes_to_matrix(min, data);	// Convert minutes to the data array to be displayed on the LED matrix
 8c8:	be 01       	movw	r22, r28
 8ca:	6b 5f       	subi	r22, 0xFB	; 251
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8a 81       	ldd	r24, Y+2	; 0x02
 8d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <minutes_to_matrix>
					hours_to_matrix(hour, data);// Convert hours to the data array to be displayed on the LED matrix
 8d4:	be 01       	movw	r22, r28
 8d6:	6b 5f       	subi	r22, 0xFB	; 251
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	89 81       	ldd	r24, Y+1	; 0x01
 8dc:	0e 94 b4 01 	call	0x368	; 0x368 <hours_to_matrix>
					display(data, 31);			// Display the data array for 0.25s
 8e0:	6f e1       	ldi	r22, 0x1F	; 31
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	ce 01       	movw	r24, r28
 8e6:	05 96       	adiw	r24, 0x05	; 5
 8e8:	0e 94 24 02 	call	0x448	; 0x448 <display>
 8ec:	83 ed       	ldi	r24, 0xD3	; 211
 8ee:	90 e3       	ldi	r25, 0x30	; 48
 8f0:	01 97       	sbiw	r24, 0x01	; 1
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__stack+0x91>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__stack+0x97>
 8f6:	00 00       	nop
				MCUCR |= (1<<ISC11);			// ...
				MCUCR &= ~(1<<ISC10);			// ... Enable interrupt on falling edge of INT1
				sei();                         	// Enable interrupts
				setmode=1;						// Go to setmode
				
				for (time_counter=0;time_counter<20;time_counter++) // Blink several times
 8f8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <time_counter>
 8fc:	8f 5f       	subi	r24, 0xFF	; 255
 8fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <time_counter>
 902:	84 31       	cpi	r24, 0x14	; 20
 904:	08 f2       	brcs	.-126    	; 0x888 <__stack+0x29>
					minutes_to_matrix(min, data);	// Convert minutes to the data array to be displayed on the LED matrix
					hours_to_matrix(hour, data);// Convert hours to the data array to be displayed on the LED matrix
					display(data, 31);			// Display the data array for 0.25s
					_delay_ms(50);				// Wait 250ms
				}
				cli();                         	// Disable interrupts
 906:	f8 94       	cli
				setmode=0;						// Exit setmode
 908:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <setmode>
				
				PORTD |= (1<<PD2);				// Give power to RTC
 90c:	92 9a       	sbi	0x12, 2	; 18
				rtc_set_time_12h(hour,min,0,0);	// Set time to RTC
 90e:	20 e0       	ldi	r18, 0x00	; 0
 910:	40 e0       	ldi	r20, 0x00	; 0
 912:	6a 81       	ldd	r22, Y+2	; 0x02
 914:	89 81       	ldd	r24, Y+1	; 0x01
 916:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <rtc_set_time_12h>
				PORTD &= ~(1<<PD2);				// Cut power to RTC
 91a:	92 98       	cbi	0x12, 2	; 18
 91c:	60 cf       	rjmp	.-320    	; 0x7de <main+0x3a>
		
		check_battery(&low_battery, &critical_battery);
		
		if(low_battery) PORTD &= ~(1<<PD4);		// if battery level is low, turn ON a LED and run the program
		
		if(critical_battery)					// if battery level is critical, blink a LED ON and OFF and don't run the program
 91e:	8e 85       	ldd	r24, Y+14	; 0x0e
 920:	81 11       	cpse	r24, r1
 922:	6e cf       	rjmp	.-292    	; 0x800 <main+0x5c>
 924:	7b cf       	rjmp	.-266    	; 0x81c <main+0x78>

00000926 <__cmpsf2>:
 926:	0e 94 47 05 	call	0xa8e	; 0xa8e <__fp_cmp>
 92a:	08 f4       	brcc	.+2      	; 0x92e <__cmpsf2+0x8>
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	08 95       	ret

00000930 <__divsf3>:
 930:	0e 94 ac 04 	call	0x958	; 0x958 <__divsf3x>
 934:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_round>
 938:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__fp_pscB>
 93c:	58 f0       	brcs	.+22     	; 0x954 <__divsf3+0x24>
 93e:	0e 94 74 05 	call	0xae8	; 0xae8 <__fp_pscA>
 942:	40 f0       	brcs	.+16     	; 0x954 <__divsf3+0x24>
 944:	29 f4       	brne	.+10     	; 0x950 <__divsf3+0x20>
 946:	5f 3f       	cpi	r21, 0xFF	; 255
 948:	29 f0       	breq	.+10     	; 0x954 <__divsf3+0x24>
 94a:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_inf>
 94e:	51 11       	cpse	r21, r1
 950:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_szero>
 954:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_nan>

00000958 <__divsf3x>:
 958:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_split3>
 95c:	68 f3       	brcs	.-38     	; 0x938 <__divsf3+0x8>

0000095e <__divsf3_pse>:
 95e:	99 23       	and	r25, r25
 960:	b1 f3       	breq	.-20     	; 0x94e <__divsf3+0x1e>
 962:	55 23       	and	r21, r21
 964:	91 f3       	breq	.-28     	; 0x94a <__divsf3+0x1a>
 966:	95 1b       	sub	r25, r21
 968:	55 0b       	sbc	r21, r21
 96a:	bb 27       	eor	r27, r27
 96c:	aa 27       	eor	r26, r26
 96e:	62 17       	cp	r22, r18
 970:	73 07       	cpc	r23, r19
 972:	84 07       	cpc	r24, r20
 974:	38 f0       	brcs	.+14     	; 0x984 <__divsf3_pse+0x26>
 976:	9f 5f       	subi	r25, 0xFF	; 255
 978:	5f 4f       	sbci	r21, 0xFF	; 255
 97a:	22 0f       	add	r18, r18
 97c:	33 1f       	adc	r19, r19
 97e:	44 1f       	adc	r20, r20
 980:	aa 1f       	adc	r26, r26
 982:	a9 f3       	breq	.-22     	; 0x96e <__divsf3_pse+0x10>
 984:	35 d0       	rcall	.+106    	; 0x9f0 <__divsf3_pse+0x92>
 986:	0e 2e       	mov	r0, r30
 988:	3a f0       	brmi	.+14     	; 0x998 <__divsf3_pse+0x3a>
 98a:	e0 e8       	ldi	r30, 0x80	; 128
 98c:	32 d0       	rcall	.+100    	; 0x9f2 <__divsf3_pse+0x94>
 98e:	91 50       	subi	r25, 0x01	; 1
 990:	50 40       	sbci	r21, 0x00	; 0
 992:	e6 95       	lsr	r30
 994:	00 1c       	adc	r0, r0
 996:	ca f7       	brpl	.-14     	; 0x98a <__divsf3_pse+0x2c>
 998:	2b d0       	rcall	.+86     	; 0x9f0 <__divsf3_pse+0x92>
 99a:	fe 2f       	mov	r31, r30
 99c:	29 d0       	rcall	.+82     	; 0x9f0 <__divsf3_pse+0x92>
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	bb 1f       	adc	r27, r27
 9a6:	26 17       	cp	r18, r22
 9a8:	37 07       	cpc	r19, r23
 9aa:	48 07       	cpc	r20, r24
 9ac:	ab 07       	cpc	r26, r27
 9ae:	b0 e8       	ldi	r27, 0x80	; 128
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <__divsf3_pse+0x56>
 9b2:	bb 0b       	sbc	r27, r27
 9b4:	80 2d       	mov	r24, r0
 9b6:	bf 01       	movw	r22, r30
 9b8:	ff 27       	eor	r31, r31
 9ba:	93 58       	subi	r25, 0x83	; 131
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	3a f0       	brmi	.+14     	; 0x9ce <__divsf3_pse+0x70>
 9c0:	9e 3f       	cpi	r25, 0xFE	; 254
 9c2:	51 05       	cpc	r21, r1
 9c4:	78 f0       	brcs	.+30     	; 0x9e4 <__divsf3_pse+0x86>
 9c6:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_inf>
 9ca:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_szero>
 9ce:	5f 3f       	cpi	r21, 0xFF	; 255
 9d0:	e4 f3       	brlt	.-8      	; 0x9ca <__divsf3_pse+0x6c>
 9d2:	98 3e       	cpi	r25, 0xE8	; 232
 9d4:	d4 f3       	brlt	.-12     	; 0x9ca <__divsf3_pse+0x6c>
 9d6:	86 95       	lsr	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	b7 95       	ror	r27
 9de:	f7 95       	ror	r31
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__divsf3_pse+0x78>
 9e4:	88 0f       	add	r24, r24
 9e6:	91 1d       	adc	r25, r1
 9e8:	96 95       	lsr	r25
 9ea:	87 95       	ror	r24
 9ec:	97 f9       	bld	r25, 7
 9ee:	08 95       	ret
 9f0:	e1 e0       	ldi	r30, 0x01	; 1
 9f2:	66 0f       	add	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	bb 1f       	adc	r27, r27
 9fa:	62 17       	cp	r22, r18
 9fc:	73 07       	cpc	r23, r19
 9fe:	84 07       	cpc	r24, r20
 a00:	ba 07       	cpc	r27, r26
 a02:	20 f0       	brcs	.+8      	; 0xa0c <__divsf3_pse+0xae>
 a04:	62 1b       	sub	r22, r18
 a06:	73 0b       	sbc	r23, r19
 a08:	84 0b       	sbc	r24, r20
 a0a:	ba 0b       	sbc	r27, r26
 a0c:	ee 1f       	adc	r30, r30
 a0e:	88 f7       	brcc	.-30     	; 0x9f2 <__divsf3_pse+0x94>
 a10:	e0 95       	com	r30
 a12:	08 95       	ret

00000a14 <__floatunsisf>:
 a14:	e8 94       	clt
 a16:	09 c0       	rjmp	.+18     	; 0xa2a <__floatsisf+0x12>

00000a18 <__floatsisf>:
 a18:	97 fb       	bst	r25, 7
 a1a:	3e f4       	brtc	.+14     	; 0xa2a <__floatsisf+0x12>
 a1c:	90 95       	com	r25
 a1e:	80 95       	com	r24
 a20:	70 95       	com	r23
 a22:	61 95       	neg	r22
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	99 23       	and	r25, r25
 a2c:	a9 f0       	breq	.+42     	; 0xa58 <__floatsisf+0x40>
 a2e:	f9 2f       	mov	r31, r25
 a30:	96 e9       	ldi	r25, 0x96	; 150
 a32:	bb 27       	eor	r27, r27
 a34:	93 95       	inc	r25
 a36:	f6 95       	lsr	r31
 a38:	87 95       	ror	r24
 a3a:	77 95       	ror	r23
 a3c:	67 95       	ror	r22
 a3e:	b7 95       	ror	r27
 a40:	f1 11       	cpse	r31, r1
 a42:	f8 cf       	rjmp	.-16     	; 0xa34 <__floatsisf+0x1c>
 a44:	fa f4       	brpl	.+62     	; 0xa84 <__floatsisf+0x6c>
 a46:	bb 0f       	add	r27, r27
 a48:	11 f4       	brne	.+4      	; 0xa4e <__floatsisf+0x36>
 a4a:	60 ff       	sbrs	r22, 0
 a4c:	1b c0       	rjmp	.+54     	; 0xa84 <__floatsisf+0x6c>
 a4e:	6f 5f       	subi	r22, 0xFF	; 255
 a50:	7f 4f       	sbci	r23, 0xFF	; 255
 a52:	8f 4f       	sbci	r24, 0xFF	; 255
 a54:	9f 4f       	sbci	r25, 0xFF	; 255
 a56:	16 c0       	rjmp	.+44     	; 0xa84 <__floatsisf+0x6c>
 a58:	88 23       	and	r24, r24
 a5a:	11 f0       	breq	.+4      	; 0xa60 <__floatsisf+0x48>
 a5c:	96 e9       	ldi	r25, 0x96	; 150
 a5e:	11 c0       	rjmp	.+34     	; 0xa82 <__floatsisf+0x6a>
 a60:	77 23       	and	r23, r23
 a62:	21 f0       	breq	.+8      	; 0xa6c <__floatsisf+0x54>
 a64:	9e e8       	ldi	r25, 0x8E	; 142
 a66:	87 2f       	mov	r24, r23
 a68:	76 2f       	mov	r23, r22
 a6a:	05 c0       	rjmp	.+10     	; 0xa76 <__floatsisf+0x5e>
 a6c:	66 23       	and	r22, r22
 a6e:	71 f0       	breq	.+28     	; 0xa8c <__floatsisf+0x74>
 a70:	96 e8       	ldi	r25, 0x86	; 134
 a72:	86 2f       	mov	r24, r22
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	60 e0       	ldi	r22, 0x00	; 0
 a78:	2a f0       	brmi	.+10     	; 0xa84 <__floatsisf+0x6c>
 a7a:	9a 95       	dec	r25
 a7c:	66 0f       	add	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	da f7       	brpl	.-10     	; 0xa7a <__floatsisf+0x62>
 a84:	88 0f       	add	r24, r24
 a86:	96 95       	lsr	r25
 a88:	87 95       	ror	r24
 a8a:	97 f9       	bld	r25, 7
 a8c:	08 95       	ret

00000a8e <__fp_cmp>:
 a8e:	99 0f       	add	r25, r25
 a90:	00 08       	sbc	r0, r0
 a92:	55 0f       	add	r21, r21
 a94:	aa 0b       	sbc	r26, r26
 a96:	e0 e8       	ldi	r30, 0x80	; 128
 a98:	fe ef       	ldi	r31, 0xFE	; 254
 a9a:	16 16       	cp	r1, r22
 a9c:	17 06       	cpc	r1, r23
 a9e:	e8 07       	cpc	r30, r24
 aa0:	f9 07       	cpc	r31, r25
 aa2:	c0 f0       	brcs	.+48     	; 0xad4 <__fp_cmp+0x46>
 aa4:	12 16       	cp	r1, r18
 aa6:	13 06       	cpc	r1, r19
 aa8:	e4 07       	cpc	r30, r20
 aaa:	f5 07       	cpc	r31, r21
 aac:	98 f0       	brcs	.+38     	; 0xad4 <__fp_cmp+0x46>
 aae:	62 1b       	sub	r22, r18
 ab0:	73 0b       	sbc	r23, r19
 ab2:	84 0b       	sbc	r24, r20
 ab4:	95 0b       	sbc	r25, r21
 ab6:	39 f4       	brne	.+14     	; 0xac6 <__fp_cmp+0x38>
 ab8:	0a 26       	eor	r0, r26
 aba:	61 f0       	breq	.+24     	; 0xad4 <__fp_cmp+0x46>
 abc:	23 2b       	or	r18, r19
 abe:	24 2b       	or	r18, r20
 ac0:	25 2b       	or	r18, r21
 ac2:	21 f4       	brne	.+8      	; 0xacc <__fp_cmp+0x3e>
 ac4:	08 95       	ret
 ac6:	0a 26       	eor	r0, r26
 ac8:	09 f4       	brne	.+2      	; 0xacc <__fp_cmp+0x3e>
 aca:	a1 40       	sbci	r26, 0x01	; 1
 acc:	a6 95       	lsr	r26
 ace:	8f ef       	ldi	r24, 0xFF	; 255
 ad0:	81 1d       	adc	r24, r1
 ad2:	81 1d       	adc	r24, r1
 ad4:	08 95       	ret

00000ad6 <__fp_inf>:
 ad6:	97 f9       	bld	r25, 7
 ad8:	9f 67       	ori	r25, 0x7F	; 127
 ada:	80 e8       	ldi	r24, 0x80	; 128
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	08 95       	ret

00000ae2 <__fp_nan>:
 ae2:	9f ef       	ldi	r25, 0xFF	; 255
 ae4:	80 ec       	ldi	r24, 0xC0	; 192
 ae6:	08 95       	ret

00000ae8 <__fp_pscA>:
 ae8:	00 24       	eor	r0, r0
 aea:	0a 94       	dec	r0
 aec:	16 16       	cp	r1, r22
 aee:	17 06       	cpc	r1, r23
 af0:	18 06       	cpc	r1, r24
 af2:	09 06       	cpc	r0, r25
 af4:	08 95       	ret

00000af6 <__fp_pscB>:
 af6:	00 24       	eor	r0, r0
 af8:	0a 94       	dec	r0
 afa:	12 16       	cp	r1, r18
 afc:	13 06       	cpc	r1, r19
 afe:	14 06       	cpc	r1, r20
 b00:	05 06       	cpc	r0, r21
 b02:	08 95       	ret

00000b04 <__fp_round>:
 b04:	09 2e       	mov	r0, r25
 b06:	03 94       	inc	r0
 b08:	00 0c       	add	r0, r0
 b0a:	11 f4       	brne	.+4      	; 0xb10 <__fp_round+0xc>
 b0c:	88 23       	and	r24, r24
 b0e:	52 f0       	brmi	.+20     	; 0xb24 <__fp_round+0x20>
 b10:	bb 0f       	add	r27, r27
 b12:	40 f4       	brcc	.+16     	; 0xb24 <__fp_round+0x20>
 b14:	bf 2b       	or	r27, r31
 b16:	11 f4       	brne	.+4      	; 0xb1c <__fp_round+0x18>
 b18:	60 ff       	sbrs	r22, 0
 b1a:	04 c0       	rjmp	.+8      	; 0xb24 <__fp_round+0x20>
 b1c:	6f 5f       	subi	r22, 0xFF	; 255
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	08 95       	ret

00000b26 <__fp_split3>:
 b26:	57 fd       	sbrc	r21, 7
 b28:	90 58       	subi	r25, 0x80	; 128
 b2a:	44 0f       	add	r20, r20
 b2c:	55 1f       	adc	r21, r21
 b2e:	59 f0       	breq	.+22     	; 0xb46 <__fp_splitA+0x10>
 b30:	5f 3f       	cpi	r21, 0xFF	; 255
 b32:	71 f0       	breq	.+28     	; 0xb50 <__fp_splitA+0x1a>
 b34:	47 95       	ror	r20

00000b36 <__fp_splitA>:
 b36:	88 0f       	add	r24, r24
 b38:	97 fb       	bst	r25, 7
 b3a:	99 1f       	adc	r25, r25
 b3c:	61 f0       	breq	.+24     	; 0xb56 <__fp_splitA+0x20>
 b3e:	9f 3f       	cpi	r25, 0xFF	; 255
 b40:	79 f0       	breq	.+30     	; 0xb60 <__fp_splitA+0x2a>
 b42:	87 95       	ror	r24
 b44:	08 95       	ret
 b46:	12 16       	cp	r1, r18
 b48:	13 06       	cpc	r1, r19
 b4a:	14 06       	cpc	r1, r20
 b4c:	55 1f       	adc	r21, r21
 b4e:	f2 cf       	rjmp	.-28     	; 0xb34 <__fp_split3+0xe>
 b50:	46 95       	lsr	r20
 b52:	f1 df       	rcall	.-30     	; 0xb36 <__fp_splitA>
 b54:	08 c0       	rjmp	.+16     	; 0xb66 <__fp_splitA+0x30>
 b56:	16 16       	cp	r1, r22
 b58:	17 06       	cpc	r1, r23
 b5a:	18 06       	cpc	r1, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	f1 cf       	rjmp	.-30     	; 0xb42 <__fp_splitA+0xc>
 b60:	86 95       	lsr	r24
 b62:	71 05       	cpc	r23, r1
 b64:	61 05       	cpc	r22, r1
 b66:	08 94       	sec
 b68:	08 95       	ret

00000b6a <__fp_zero>:
 b6a:	e8 94       	clt

00000b6c <__fp_szero>:
 b6c:	bb 27       	eor	r27, r27
 b6e:	66 27       	eor	r22, r22
 b70:	77 27       	eor	r23, r23
 b72:	cb 01       	movw	r24, r22
 b74:	97 f9       	bld	r25, 7
 b76:	08 95       	ret

00000b78 <__mulsf3>:
 b78:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3x>
 b7c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_round>
 b80:	0e 94 74 05 	call	0xae8	; 0xae8 <__fp_pscA>
 b84:	38 f0       	brcs	.+14     	; 0xb94 <__mulsf3+0x1c>
 b86:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__fp_pscB>
 b8a:	20 f0       	brcs	.+8      	; 0xb94 <__mulsf3+0x1c>
 b8c:	95 23       	and	r25, r21
 b8e:	11 f0       	breq	.+4      	; 0xb94 <__mulsf3+0x1c>
 b90:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_inf>
 b94:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_nan>
 b98:	11 24       	eor	r1, r1
 b9a:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_szero>

00000b9e <__mulsf3x>:
 b9e:	0e 94 93 05 	call	0xb26	; 0xb26 <__fp_split3>
 ba2:	70 f3       	brcs	.-36     	; 0xb80 <__mulsf3+0x8>

00000ba4 <__mulsf3_pse>:
 ba4:	95 9f       	mul	r25, r21
 ba6:	c1 f3       	breq	.-16     	; 0xb98 <__mulsf3+0x20>
 ba8:	95 0f       	add	r25, r21
 baa:	50 e0       	ldi	r21, 0x00	; 0
 bac:	55 1f       	adc	r21, r21
 bae:	62 9f       	mul	r22, r18
 bb0:	f0 01       	movw	r30, r0
 bb2:	72 9f       	mul	r23, r18
 bb4:	bb 27       	eor	r27, r27
 bb6:	f0 0d       	add	r31, r0
 bb8:	b1 1d       	adc	r27, r1
 bba:	63 9f       	mul	r22, r19
 bbc:	aa 27       	eor	r26, r26
 bbe:	f0 0d       	add	r31, r0
 bc0:	b1 1d       	adc	r27, r1
 bc2:	aa 1f       	adc	r26, r26
 bc4:	64 9f       	mul	r22, r20
 bc6:	66 27       	eor	r22, r22
 bc8:	b0 0d       	add	r27, r0
 bca:	a1 1d       	adc	r26, r1
 bcc:	66 1f       	adc	r22, r22
 bce:	82 9f       	mul	r24, r18
 bd0:	22 27       	eor	r18, r18
 bd2:	b0 0d       	add	r27, r0
 bd4:	a1 1d       	adc	r26, r1
 bd6:	62 1f       	adc	r22, r18
 bd8:	73 9f       	mul	r23, r19
 bda:	b0 0d       	add	r27, r0
 bdc:	a1 1d       	adc	r26, r1
 bde:	62 1f       	adc	r22, r18
 be0:	83 9f       	mul	r24, r19
 be2:	a0 0d       	add	r26, r0
 be4:	61 1d       	adc	r22, r1
 be6:	22 1f       	adc	r18, r18
 be8:	74 9f       	mul	r23, r20
 bea:	33 27       	eor	r19, r19
 bec:	a0 0d       	add	r26, r0
 bee:	61 1d       	adc	r22, r1
 bf0:	23 1f       	adc	r18, r19
 bf2:	84 9f       	mul	r24, r20
 bf4:	60 0d       	add	r22, r0
 bf6:	21 1d       	adc	r18, r1
 bf8:	82 2f       	mov	r24, r18
 bfa:	76 2f       	mov	r23, r22
 bfc:	6a 2f       	mov	r22, r26
 bfe:	11 24       	eor	r1, r1
 c00:	9f 57       	subi	r25, 0x7F	; 127
 c02:	50 40       	sbci	r21, 0x00	; 0
 c04:	9a f0       	brmi	.+38     	; 0xc2c <__mulsf3_pse+0x88>
 c06:	f1 f0       	breq	.+60     	; 0xc44 <__mulsf3_pse+0xa0>
 c08:	88 23       	and	r24, r24
 c0a:	4a f0       	brmi	.+18     	; 0xc1e <__mulsf3_pse+0x7a>
 c0c:	ee 0f       	add	r30, r30
 c0e:	ff 1f       	adc	r31, r31
 c10:	bb 1f       	adc	r27, r27
 c12:	66 1f       	adc	r22, r22
 c14:	77 1f       	adc	r23, r23
 c16:	88 1f       	adc	r24, r24
 c18:	91 50       	subi	r25, 0x01	; 1
 c1a:	50 40       	sbci	r21, 0x00	; 0
 c1c:	a9 f7       	brne	.-22     	; 0xc08 <__mulsf3_pse+0x64>
 c1e:	9e 3f       	cpi	r25, 0xFE	; 254
 c20:	51 05       	cpc	r21, r1
 c22:	80 f0       	brcs	.+32     	; 0xc44 <__mulsf3_pse+0xa0>
 c24:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_inf>
 c28:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_szero>
 c2c:	5f 3f       	cpi	r21, 0xFF	; 255
 c2e:	e4 f3       	brlt	.-8      	; 0xc28 <__mulsf3_pse+0x84>
 c30:	98 3e       	cpi	r25, 0xE8	; 232
 c32:	d4 f3       	brlt	.-12     	; 0xc28 <__mulsf3_pse+0x84>
 c34:	86 95       	lsr	r24
 c36:	77 95       	ror	r23
 c38:	67 95       	ror	r22
 c3a:	b7 95       	ror	r27
 c3c:	f7 95       	ror	r31
 c3e:	e7 95       	ror	r30
 c40:	9f 5f       	subi	r25, 0xFF	; 255
 c42:	c1 f7       	brne	.-16     	; 0xc34 <__mulsf3_pse+0x90>
 c44:	fe 2b       	or	r31, r30
 c46:	88 0f       	add	r24, r24
 c48:	91 1d       	adc	r25, r1
 c4a:	96 95       	lsr	r25
 c4c:	87 95       	ror	r24
 c4e:	97 f9       	bld	r25, 7
 c50:	08 95       	ret

00000c52 <__tablejump2__>:
 c52:	ee 0f       	add	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	05 90       	lpm	r0, Z+
 c58:	f4 91       	lpm	r31, Z
 c5a:	e0 2d       	mov	r30, r0
 c5c:	09 94       	ijmp

00000c5e <__muldi3>:
 c5e:	df 93       	push	r29
 c60:	cf 93       	push	r28
 c62:	1f 93       	push	r17
 c64:	0f 93       	push	r16
 c66:	9a 9d       	mul	r25, r10
 c68:	f0 2d       	mov	r31, r0
 c6a:	21 9f       	mul	r18, r17
 c6c:	f0 0d       	add	r31, r0
 c6e:	8b 9d       	mul	r24, r11
 c70:	f0 0d       	add	r31, r0
 c72:	8a 9d       	mul	r24, r10
 c74:	e0 2d       	mov	r30, r0
 c76:	f1 0d       	add	r31, r1
 c78:	03 9f       	mul	r16, r19
 c7a:	f0 0d       	add	r31, r0
 c7c:	02 9f       	mul	r16, r18
 c7e:	e0 0d       	add	r30, r0
 c80:	f1 1d       	adc	r31, r1
 c82:	4e 9d       	mul	r20, r14
 c84:	e0 0d       	add	r30, r0
 c86:	f1 1d       	adc	r31, r1
 c88:	5e 9d       	mul	r21, r14
 c8a:	f0 0d       	add	r31, r0
 c8c:	4f 9d       	mul	r20, r15
 c8e:	f0 0d       	add	r31, r0
 c90:	7f 93       	push	r23
 c92:	6f 93       	push	r22
 c94:	bf 92       	push	r11
 c96:	af 92       	push	r10
 c98:	5f 93       	push	r21
 c9a:	4f 93       	push	r20
 c9c:	d5 01       	movw	r26, r10
 c9e:	0e 94 e7 06 	call	0xdce	; 0xdce <__umulhisi3>
 ca2:	8b 01       	movw	r16, r22
 ca4:	ac 01       	movw	r20, r24
 ca6:	d7 01       	movw	r26, r14
 ca8:	0e 94 e7 06 	call	0xdce	; 0xdce <__umulhisi3>
 cac:	eb 01       	movw	r28, r22
 cae:	e8 0f       	add	r30, r24
 cb0:	f9 1f       	adc	r31, r25
 cb2:	d6 01       	movw	r26, r12
 cb4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__muldi3_6>
 cb8:	2f 91       	pop	r18
 cba:	3f 91       	pop	r19
 cbc:	d6 01       	movw	r26, r12
 cbe:	0e 94 e7 06 	call	0xdce	; 0xdce <__umulhisi3>
 cc2:	c6 0f       	add	r28, r22
 cc4:	d7 1f       	adc	r29, r23
 cc6:	e8 1f       	adc	r30, r24
 cc8:	f9 1f       	adc	r31, r25
 cca:	af 91       	pop	r26
 ccc:	bf 91       	pop	r27
 cce:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__muldi3_6>
 cd2:	2f 91       	pop	r18
 cd4:	3f 91       	pop	r19
 cd6:	0e 94 e7 06 	call	0xdce	; 0xdce <__umulhisi3>
 cda:	c6 0f       	add	r28, r22
 cdc:	d7 1f       	adc	r29, r23
 cde:	e8 1f       	adc	r30, r24
 ce0:	f9 1f       	adc	r31, r25
 ce2:	d6 01       	movw	r26, r12
 ce4:	0e 94 e7 06 	call	0xdce	; 0xdce <__umulhisi3>
 ce8:	e6 0f       	add	r30, r22
 cea:	f7 1f       	adc	r31, r23
 cec:	98 01       	movw	r18, r16
 cee:	be 01       	movw	r22, r28
 cf0:	cf 01       	movw	r24, r30
 cf2:	11 24       	eor	r1, r1
 cf4:	0f 91       	pop	r16
 cf6:	1f 91       	pop	r17
 cf8:	cf 91       	pop	r28
 cfa:	df 91       	pop	r29
 cfc:	08 95       	ret

00000cfe <__muldi3_6>:
 cfe:	0e 94 e7 06 	call	0xdce	; 0xdce <__umulhisi3>
 d02:	46 0f       	add	r20, r22
 d04:	57 1f       	adc	r21, r23
 d06:	c8 1f       	adc	r28, r24
 d08:	d9 1f       	adc	r29, r25
 d0a:	08 f4       	brcc	.+2      	; 0xd0e <__muldi3_6+0x10>
 d0c:	31 96       	adiw	r30, 0x01	; 1
 d0e:	08 95       	ret

00000d10 <__umoddi3>:
 d10:	68 94       	set
 d12:	01 c0       	rjmp	.+2      	; 0xd16 <__udivdi3_umoddi3>

00000d14 <__udivdi3>:
 d14:	e8 94       	clt

00000d16 <__udivdi3_umoddi3>:
 d16:	8f 92       	push	r8
 d18:	9f 92       	push	r9
 d1a:	cf 93       	push	r28
 d1c:	df 93       	push	r29
 d1e:	0e 94 96 06 	call	0xd2c	; 0xd2c <__udivmod64>
 d22:	df 91       	pop	r29
 d24:	cf 91       	pop	r28
 d26:	9f 90       	pop	r9
 d28:	8f 90       	pop	r8
 d2a:	08 95       	ret

00000d2c <__udivmod64>:
 d2c:	88 24       	eor	r8, r8
 d2e:	99 24       	eor	r9, r9
 d30:	f4 01       	movw	r30, r8
 d32:	e4 01       	movw	r28, r8
 d34:	b0 e4       	ldi	r27, 0x40	; 64
 d36:	9f 93       	push	r25
 d38:	aa 27       	eor	r26, r26
 d3a:	9a 15       	cp	r25, r10
 d3c:	8b 04       	cpc	r8, r11
 d3e:	9c 04       	cpc	r9, r12
 d40:	ed 05       	cpc	r30, r13
 d42:	fe 05       	cpc	r31, r14
 d44:	cf 05       	cpc	r28, r15
 d46:	d0 07       	cpc	r29, r16
 d48:	a1 07       	cpc	r26, r17
 d4a:	98 f4       	brcc	.+38     	; 0xd72 <__udivmod64+0x46>
 d4c:	ad 2f       	mov	r26, r29
 d4e:	dc 2f       	mov	r29, r28
 d50:	cf 2f       	mov	r28, r31
 d52:	fe 2f       	mov	r31, r30
 d54:	e9 2d       	mov	r30, r9
 d56:	98 2c       	mov	r9, r8
 d58:	89 2e       	mov	r8, r25
 d5a:	98 2f       	mov	r25, r24
 d5c:	87 2f       	mov	r24, r23
 d5e:	76 2f       	mov	r23, r22
 d60:	65 2f       	mov	r22, r21
 d62:	54 2f       	mov	r21, r20
 d64:	43 2f       	mov	r20, r19
 d66:	32 2f       	mov	r19, r18
 d68:	22 27       	eor	r18, r18
 d6a:	b8 50       	subi	r27, 0x08	; 8
 d6c:	31 f7       	brne	.-52     	; 0xd3a <__udivmod64+0xe>
 d6e:	bf 91       	pop	r27
 d70:	27 c0       	rjmp	.+78     	; 0xdc0 <__udivmod64+0x94>
 d72:	1b 2e       	mov	r1, r27
 d74:	bf 91       	pop	r27
 d76:	bb 27       	eor	r27, r27
 d78:	22 0f       	add	r18, r18
 d7a:	33 1f       	adc	r19, r19
 d7c:	44 1f       	adc	r20, r20
 d7e:	55 1f       	adc	r21, r21
 d80:	66 1f       	adc	r22, r22
 d82:	77 1f       	adc	r23, r23
 d84:	88 1f       	adc	r24, r24
 d86:	99 1f       	adc	r25, r25
 d88:	88 1c       	adc	r8, r8
 d8a:	99 1c       	adc	r9, r9
 d8c:	ee 1f       	adc	r30, r30
 d8e:	ff 1f       	adc	r31, r31
 d90:	cc 1f       	adc	r28, r28
 d92:	dd 1f       	adc	r29, r29
 d94:	aa 1f       	adc	r26, r26
 d96:	bb 1f       	adc	r27, r27
 d98:	8a 14       	cp	r8, r10
 d9a:	9b 04       	cpc	r9, r11
 d9c:	ec 05       	cpc	r30, r12
 d9e:	fd 05       	cpc	r31, r13
 da0:	ce 05       	cpc	r28, r14
 da2:	df 05       	cpc	r29, r15
 da4:	a0 07       	cpc	r26, r16
 da6:	b1 07       	cpc	r27, r17
 da8:	48 f0       	brcs	.+18     	; 0xdbc <__udivmod64+0x90>
 daa:	8a 18       	sub	r8, r10
 dac:	9b 08       	sbc	r9, r11
 dae:	ec 09       	sbc	r30, r12
 db0:	fd 09       	sbc	r31, r13
 db2:	ce 09       	sbc	r28, r14
 db4:	df 09       	sbc	r29, r15
 db6:	a0 0b       	sbc	r26, r16
 db8:	b1 0b       	sbc	r27, r17
 dba:	21 60       	ori	r18, 0x01	; 1
 dbc:	1a 94       	dec	r1
 dbe:	e1 f6       	brne	.-72     	; 0xd78 <__udivmod64+0x4c>
 dc0:	2e f4       	brtc	.+10     	; 0xdcc <__udivmod64+0xa0>
 dc2:	94 01       	movw	r18, r8
 dc4:	af 01       	movw	r20, r30
 dc6:	be 01       	movw	r22, r28
 dc8:	cd 01       	movw	r24, r26
 dca:	00 0c       	add	r0, r0
 dcc:	08 95       	ret

00000dce <__umulhisi3>:
 dce:	a2 9f       	mul	r26, r18
 dd0:	b0 01       	movw	r22, r0
 dd2:	b3 9f       	mul	r27, r19
 dd4:	c0 01       	movw	r24, r0
 dd6:	a3 9f       	mul	r26, r19
 dd8:	70 0d       	add	r23, r0
 dda:	81 1d       	adc	r24, r1
 ddc:	11 24       	eor	r1, r1
 dde:	91 1d       	adc	r25, r1
 de0:	b2 9f       	mul	r27, r18
 de2:	70 0d       	add	r23, r0
 de4:	81 1d       	adc	r24, r1
 de6:	11 24       	eor	r1, r1
 de8:	91 1d       	adc	r25, r1
 dea:	08 95       	ret

00000dec <_exit>:
 dec:	f8 94       	cli

00000dee <__stop_program>:
 dee:	ff cf       	rjmp	.-2      	; 0xdee <__stop_program>
