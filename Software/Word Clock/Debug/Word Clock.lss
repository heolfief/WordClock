
Word Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c86  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000142d  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000922  00000000  00000000  00002295  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c57  00000000  00000000  00002bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f8  00000000  00000000  00003810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000595  00000000  00000000  00003c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000161c  00000000  00000000  0000419d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000057b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_2>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	1a 01       	movw	r2, r20
  56:	1a 01       	movw	r2, r20
  58:	1a 01       	movw	r2, r20
  5a:	1a 01       	movw	r2, r20
  5c:	1a 01       	movw	r2, r20
  5e:	1f 01       	movw	r2, r30
  60:	1f 01       	movw	r2, r30
  62:	1f 01       	movw	r2, r30
  64:	1f 01       	movw	r2, r30
  66:	1f 01       	movw	r2, r30
  68:	26 01       	movw	r4, r12
  6a:	26 01       	movw	r4, r12
  6c:	26 01       	movw	r4, r12
  6e:	26 01       	movw	r4, r12
  70:	26 01       	movw	r4, r12
  72:	2d 01       	movw	r4, r26
  74:	2d 01       	movw	r4, r26
  76:	2d 01       	movw	r4, r26
  78:	2d 01       	movw	r4, r26
  7a:	2d 01       	movw	r4, r26
  7c:	34 01       	movw	r6, r8
  7e:	34 01       	movw	r6, r8
  80:	34 01       	movw	r6, r8
  82:	34 01       	movw	r6, r8
  84:	34 01       	movw	r6, r8
  86:	3b 01       	movw	r6, r22
  88:	3b 01       	movw	r6, r22
  8a:	3b 01       	movw	r6, r22
  8c:	3b 01       	movw	r6, r22
  8e:	3b 01       	movw	r6, r22
  90:	42 01       	movw	r8, r4
  92:	42 01       	movw	r8, r4
  94:	42 01       	movw	r8, r4
  96:	42 01       	movw	r8, r4
  98:	42 01       	movw	r8, r4
  9a:	49 01       	movw	r8, r18
  9c:	49 01       	movw	r8, r18
  9e:	49 01       	movw	r8, r18
  a0:	49 01       	movw	r8, r18
  a2:	49 01       	movw	r8, r18
  a4:	50 01       	movw	r10, r0
  a6:	50 01       	movw	r10, r0
  a8:	50 01       	movw	r10, r0
  aa:	50 01       	movw	r10, r0
  ac:	50 01       	movw	r10, r0
  ae:	57 01       	movw	r10, r14
  b0:	57 01       	movw	r10, r14
  b2:	57 01       	movw	r10, r14
  b4:	57 01       	movw	r10, r14
  b6:	57 01       	movw	r10, r14
  b8:	5e 01       	movw	r10, r28
  ba:	5e 01       	movw	r10, r28
  bc:	5e 01       	movw	r10, r28
  be:	5e 01       	movw	r10, r28
  c0:	5e 01       	movw	r10, r28
  c2:	65 01       	movw	r12, r10
  c4:	65 01       	movw	r12, r10
  c6:	65 01       	movw	r12, r10
  c8:	65 01       	movw	r12, r10
  ca:	65 01       	movw	r12, r10
  cc:	7b 01       	movw	r14, r22
  ce:	83 01       	movw	r16, r6
  d0:	8b 01       	movw	r16, r22
  d2:	94 01       	movw	r18, r8
  d4:	9c 01       	movw	r18, r24
  d6:	a4 01       	movw	r20, r8
  d8:	ac 01       	movw	r20, r24
  da:	b4 01       	movw	r22, r8
  dc:	bc 01       	movw	r22, r24
  de:	c4 01       	movw	r24, r8
  e0:	cc 01       	movw	r24, r24
  e2:	d4 01       	movw	r26, r8
  e4:	60 02       	muls	r22, r16
  e6:	69 02       	muls	r22, r25
  e8:	72 02       	muls	r23, r18
  ea:	7b 02       	muls	r23, r27
  ec:	84 02       	muls	r24, r20
  ee:	8d 02       	muls	r24, r29
  f0:	96 02       	muls	r25, r22
  f2:	9f 02       	muls	r25, r31

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf e5       	ldi	r28, 0x5F	; 95
  fa:	d8 e0       	ldi	r29, 0x08	; 8
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	0e 94 78 03 	call	0x6f0	; 0x6f0 <main>
 104:	0c 94 41 06 	jmp	0xc82	; 0xc82 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 10c:	88 e4       	ldi	r24, 0x48	; 72
 10e:	80 b9       	out	0x00, r24	; 0
 110:	08 95       	ret

00000112 <i2c_start>:
 112:	16 be       	out	0x36, r1	; 54
 114:	94 ea       	ldi	r25, 0xA4	; 164
 116:	96 bf       	out	0x36, r25	; 54
 118:	06 b6       	in	r0, 0x36	; 54
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <i2c_start+0x6>
 11e:	91 b1       	in	r25, 0x01	; 1
 120:	98 7f       	andi	r25, 0xF8	; 248
 122:	98 30       	cpi	r25, 0x08	; 8
 124:	79 f4       	brne	.+30     	; 0x144 <i2c_start+0x32>
 126:	83 b9       	out	0x03, r24	; 3
 128:	84 e8       	ldi	r24, 0x84	; 132
 12a:	86 bf       	out	0x36, r24	; 54
 12c:	06 b6       	in	r0, 0x36	; 54
 12e:	07 fe       	sbrs	r0, 7
 130:	fd cf       	rjmp	.-6      	; 0x12c <i2c_start+0x1a>
 132:	91 b1       	in	r25, 0x01	; 1
 134:	98 7f       	andi	r25, 0xF8	; 248
 136:	98 31       	cpi	r25, 0x18	; 24
 138:	39 f0       	breq	.+14     	; 0x148 <i2c_start+0x36>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 34       	cpi	r25, 0x40	; 64
 13e:	29 f4       	brne	.+10     	; 0x14a <i2c_start+0x38>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret

0000014c <i2c_write>:
 14c:	83 b9       	out	0x03, r24	; 3
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	86 bf       	out	0x36, r24	; 54
 152:	06 b6       	in	r0, 0x36	; 54
 154:	07 fe       	sbrs	r0, 7
 156:	fd cf       	rjmp	.-6      	; 0x152 <i2c_write+0x6>
 158:	91 b1       	in	r25, 0x01	; 1
 15a:	98 7f       	andi	r25, 0xF8	; 248
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	98 32       	cpi	r25, 0x28	; 40
 160:	09 f4       	brne	.+2      	; 0x164 <i2c_write+0x18>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret

00000166 <i2c_read_ack>:
 166:	84 ec       	ldi	r24, 0xC4	; 196
 168:	86 bf       	out	0x36, r24	; 54
 16a:	06 b6       	in	r0, 0x36	; 54
 16c:	07 fe       	sbrs	r0, 7
 16e:	fd cf       	rjmp	.-6      	; 0x16a <i2c_read_ack+0x4>
 170:	83 b1       	in	r24, 0x03	; 3
 172:	08 95       	ret

00000174 <i2c_read_nack>:
 174:	84 e8       	ldi	r24, 0x84	; 132
 176:	86 bf       	out	0x36, r24	; 54
 178:	06 b6       	in	r0, 0x36	; 54
 17a:	07 fe       	sbrs	r0, 7
 17c:	fd cf       	rjmp	.-6      	; 0x178 <i2c_read_nack+0x4>
 17e:	83 b1       	in	r24, 0x03	; 3
 180:	08 95       	ret

00000182 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 182:	84 e9       	ldi	r24, 0x94	; 148
 184:	86 bf       	out	0x36, r24	; 54
 186:	08 95       	ret

00000188 <bcdtodec>:
	*sec = bcdtodec(i2c_read_ack());
	*min = bcdtodec(i2c_read_ack());
	*hour = bcdtodec(i2c_read_nack() & 0x3F);
	
	i2c_stop();
}
 188:	98 2f       	mov	r25, r24
 18a:	92 95       	swap	r25
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	99 0f       	add	r25, r25
 190:	29 2f       	mov	r18, r25
 192:	22 0f       	add	r18, r18
 194:	22 0f       	add	r18, r18
 196:	92 0f       	add	r25, r18
 198:	8f 70       	andi	r24, 0x0F	; 15
 19a:	89 0f       	add	r24, r25
 19c:	08 95       	ret

0000019e <rtc_get_time_12h>:

void rtc_get_time_12h(uint8_t *hour, uint8_t *min, uint8_t *sec, uint8_t *am_pm)
{
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	7c 01       	movw	r14, r24
 1b0:	eb 01       	movw	r28, r22
 1b2:	6a 01       	movw	r12, r20
 1b4:	89 01       	movw	r16, r18
	// 12 hour mode
	
	uint8_t temphour;
	
	i2c_start((RTC_ADDR<<1) | I2C_WRITE);
 1b6:	80 ed       	ldi	r24, 0xD0	; 208
 1b8:	0e 94 89 00 	call	0x112	; 0x112 <i2c_start>
	i2c_write(0x00);
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_write>
	i2c_stop();
 1c2:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_stop>
	
	i2c_start((RTC_ADDR<<1) | I2C_READ);
 1c6:	81 ed       	ldi	r24, 0xD1	; 209
 1c8:	0e 94 89 00 	call	0x112	; 0x112 <i2c_start>
	
	*sec = bcdtodec(i2c_read_ack());
 1cc:	0e 94 b3 00 	call	0x166	; 0x166 <i2c_read_ack>
 1d0:	0e 94 c4 00 	call	0x188	; 0x188 <bcdtodec>
 1d4:	f6 01       	movw	r30, r12
 1d6:	80 83       	st	Z, r24
	*min = bcdtodec(i2c_read_ack());
 1d8:	0e 94 b3 00 	call	0x166	; 0x166 <i2c_read_ack>
 1dc:	0e 94 c4 00 	call	0x188	; 0x188 <bcdtodec>
 1e0:	88 83       	st	Y, r24
	temphour = i2c_read_nack();
 1e2:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_read_nack>
 1e6:	c8 2f       	mov	r28, r24
	
	i2c_stop();
 1e8:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_stop>

	*hour =  bcdtodec(temphour & 0x1F);
 1ec:	8c 2f       	mov	r24, r28
 1ee:	8f 71       	andi	r24, 0x1F	; 31
 1f0:	0e 94 c4 00 	call	0x188	; 0x188 <bcdtodec>
 1f4:	f7 01       	movw	r30, r14
 1f6:	80 83       	st	Z, r24

	if (temphour & 0x20)	// if PM
 1f8:	c5 ff       	sbrs	r28, 5
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <rtc_get_time_12h+0x66>
	*am_pm = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	f8 01       	movw	r30, r16
 200:	80 83       	st	Z, r24
 202:	02 c0       	rjmp	.+4      	; 0x208 <rtc_get_time_12h+0x6a>
	else					// if AM
	*am_pm = 0;
 204:	f8 01       	movw	r30, r16
 206:	10 82       	st	Z, r1
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	08 95       	ret

0000021a <minutes_to_matrix>:
		}
	}
}

void minutes_to_matrix(uint8_t now_minutes, uint8_t *line_data)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	eb 01       	movw	r28, r22
	switch(now_minutes)							// Led matrix is active low, 0 is LED on, 1 is LED off
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	8c 33       	cpi	r24, 0x3C	; 60
 224:	91 05       	cpc	r25, r1
 226:	08 f0       	brcs	.+2      	; 0x22a <minutes_to_matrix+0x10>
 228:	56 c0       	rjmp	.+172    	; 0x2d6 <minutes_to_matrix+0xbc>
 22a:	fc 01       	movw	r30, r24
 22c:	e6 5d       	subi	r30, 0xD6	; 214
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__tablejump2__>
	{
		// minutes from 0 to 4 : line 0,1 and 2 off						   HATWENTY					  FIFVTEEN					 LFXPASTO
		case  0 : case  1 : case  2 : case  3 : case  4 : line_data[0] = 0b11111111; line_data[1] = 0b11111111; line_data[2] = 0b11111111; break;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	88 83       	st	Y, r24
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	8a 83       	std	Y+2, r24	; 0x02
 23c:	4c c0       	rjmp	.+152    	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 5 to 9 : "five" and "past" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
		case  5 : case  6 : case  7 : case  8 : case  9 : line_data[0] = 0b11111111; line_data[1] = 0b00101011; line_data[2] = 0b11100001; break;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	88 83       	st	Y, r24
 242:	8b e2       	ldi	r24, 0x2B	; 43
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	81 ee       	ldi	r24, 0xE1	; 225
 248:	8a 83       	std	Y+2, r24	; 0x02
 24a:	45 c0       	rjmp	.+138    	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 10 to 14 : "ten" and "past" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 10 : case 11 : case 12 : case 13 : case 14 : line_data[0] = 0b11010011; line_data[1] = 0b11111111; line_data[2] = 0b11100001; break;
 24c:	83 ed       	ldi	r24, 0xD3	; 211
 24e:	88 83       	st	Y, r24
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	81 ee       	ldi	r24, 0xE1	; 225
 256:	8a 83       	std	Y+2, r24	; 0x02
 258:	3e c0       	rjmp	.+124    	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 15 to 19 : "fifteen" and "past" words are lit	   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 15 : case 16 : case 17 : case 18 : case 19 : line_data[0] = 0b11111111; line_data[1] = 0b00010000; line_data[2] = 0b11100001; break;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	88 83       	st	Y, r24
 25e:	80 e1       	ldi	r24, 0x10	; 16
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	81 ee       	ldi	r24, 0xE1	; 225
 264:	8a 83       	std	Y+2, r24	; 0x02
 266:	37 c0       	rjmp	.+110    	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 20 to 24 : "twenty" and "past" words are lit	   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 20 : case 21 : case 22 : case 23 : case 24 : line_data[0] = 0b11000000; line_data[1] = 0b11111111; line_data[2] = 0b11100001; break;
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	88 83       	st	Y, r24
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	81 ee       	ldi	r24, 0xE1	; 225
 272:	8a 83       	std	Y+2, r24	; 0x02
 274:	30 c0       	rjmp	.+96     	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 25 to 29 : "twenty five" and "past" words are lit  HATWENTY					  FIFVTEEN					 LFXPASTO
		case 25 : case 26 : case 27 : case 28 : case 29 : line_data[0] = 0b11000000; line_data[1] = 0b00101011; line_data[2] = 0b11100001; break;
 276:	80 ec       	ldi	r24, 0xC0	; 192
 278:	88 83       	st	Y, r24
 27a:	8b e2       	ldi	r24, 0x2B	; 43
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	81 ee       	ldi	r24, 0xE1	; 225
 280:	8a 83       	std	Y+2, r24	; 0x02
 282:	29 c0       	rjmp	.+82     	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 30 to 34 : "half" and "past" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 30 : case 31 : case 32 : case 33 : case 34 : line_data[0] = 0b00111111; line_data[1] = 0b11111111; line_data[2] = 0b00100001; break;
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	88 83       	st	Y, r24
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	89 83       	std	Y+1, r24	; 0x01
 28c:	81 e2       	ldi	r24, 0x21	; 33
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	22 c0       	rjmp	.+68     	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 35 to 39 : "twenty five" and "to" words are lit	   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 35 : case 36 : case 37 : case 38 : case 39 : line_data[0] = 0b11000000; line_data[1] = 0b00101011; line_data[2] = 0b11111100; break;
 292:	80 ec       	ldi	r24, 0xC0	; 192
 294:	88 83       	st	Y, r24
 296:	8b e2       	ldi	r24, 0x2B	; 43
 298:	89 83       	std	Y+1, r24	; 0x01
 29a:	8c ef       	ldi	r24, 0xFC	; 252
 29c:	8a 83       	std	Y+2, r24	; 0x02
 29e:	1b c0       	rjmp	.+54     	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 40 to 44 : "twenty" and "to" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 40 : case 41 : case 42 : case 43 : case 44 : line_data[0] = 0b11000000; line_data[1] = 0b11111111; line_data[2] = 0b11111100; break;
 2a0:	80 ec       	ldi	r24, 0xC0	; 192
 2a2:	88 83       	st	Y, r24
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	8c ef       	ldi	r24, 0xFC	; 252
 2aa:	8a 83       	std	Y+2, r24	; 0x02
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 45 to 49 : "fifteen" and "to" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 45 : case 46 : case 47 : case 48 : case 49 : line_data[0] = 0b11111111; line_data[1] = 0b00010000; line_data[2] = 0b11111100; break;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	88 83       	st	Y, r24
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	8c ef       	ldi	r24, 0xFC	; 252
 2b8:	8a 83       	std	Y+2, r24	; 0x02
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 50 to 54 : "ten" and "to" words are lit			   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 50 : case 51 : case 52 : case 53 : case 54 : line_data[0] = 0b11010011; line_data[1] = 0b11111111; line_data[2] = 0b11111100; break;
 2bc:	83 ed       	ldi	r24, 0xD3	; 211
 2be:	88 83       	st	Y, r24
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	8c ef       	ldi	r24, 0xFC	; 252
 2c6:	8a 83       	std	Y+2, r24	; 0x02
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <minutes_to_matrix+0xbc>
		
		// minutes from 55 to 59 : "five" and "to" words are lit		   HATWENTY					  FIFVTEEN					 LFXPASTO
		case 55 : case 56 : case 57 : case 58 : case 59 : line_data[0] = 0b11111111; line_data[1] = 0b00101011; line_data[2] = 0b11111100; break;
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	88 83       	st	Y, r24
 2ce:	8b e2       	ldi	r24, 0x2B	; 43
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	8c ef       	ldi	r24, 0xFC	; 252
 2d4:	8a 83       	std	Y+2, r24	; 0x02
	}
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <hours_to_matrix>:

void hours_to_matrix(uint8_t now_hours, uint8_t *line_data)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	eb 01       	movw	r28, r22
	switch(now_hours)							// Led matrix is active low, 0 is LED on, 1 is LED off
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	8c 30       	cpi	r24, 0x0C	; 12
 2e6:	91 05       	cpc	r25, r1
 2e8:	08 f0       	brcs	.+2      	; 0x2ec <hours_to_matrix+0x10>
 2ea:	65 c0       	rjmp	.+202    	; 0x3b6 <hours_to_matrix+0xda>
 2ec:	fc 01       	movw	r30, r24
 2ee:	ea 59       	subi	r30, 0x9A	; 154
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__tablejump2__>
	{
		// 	twelve				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  0 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b00001001; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	8b 83       	std	Y+3, r24	; 0x03
 2fa:	8c 83       	std	Y+4, r24	; 0x04
 2fc:	99 e0       	ldi	r25, 0x09	; 9
 2fe:	9d 83       	std	Y+5, r25	; 0x05
 300:	8e 83       	std	Y+6, r24	; 0x06
 302:	8f 83       	std	Y+7, r24	; 0x07
 304:	58 c0       	rjmp	.+176    	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	one					   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  1 : line_data[3] = 0b11111111; line_data[4] = 0b00011111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	8b 83       	std	Y+3, r24	; 0x03
 30a:	9f e1       	ldi	r25, 0x1F	; 31
 30c:	9c 83       	std	Y+4, r25	; 0x04
 30e:	8d 83       	std	Y+5, r24	; 0x05
 310:	8e 83       	std	Y+6, r24	; 0x06
 312:	8f 83       	std	Y+7, r24	; 0x07
 314:	50 c0       	rjmp	.+160    	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	two					   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  2 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b00111111; line_data[6] = 0b10111111; line_data[7] = 0b11111111; break;
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	8b 83       	std	Y+3, r24	; 0x03
 31a:	8c 83       	std	Y+4, r24	; 0x04
 31c:	9f e3       	ldi	r25, 0x3F	; 63
 31e:	9d 83       	std	Y+5, r25	; 0x05
 320:	9f eb       	ldi	r25, 0xBF	; 191
 322:	9e 83       	std	Y+6, r25	; 0x06
 324:	8f 83       	std	Y+7, r24	; 0x07
 326:	47 c0       	rjmp	.+142    	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	three				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  3 : line_data[3] = 0b11111111; line_data[4] = 0b11100000; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	8b 83       	std	Y+3, r24	; 0x03
 32c:	90 ee       	ldi	r25, 0xE0	; 224
 32e:	9c 83       	std	Y+4, r25	; 0x04
 330:	8d 83       	std	Y+5, r24	; 0x05
 332:	8e 83       	std	Y+6, r24	; 0x06
 334:	8f 83       	std	Y+7, r24	; 0x07
 336:	3f c0       	rjmp	.+126    	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	four				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  4 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b00001111; line_data[7] = 0b11111111; break;
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	8b 83       	std	Y+3, r24	; 0x03
 33c:	8c 83       	std	Y+4, r24	; 0x04
 33e:	8d 83       	std	Y+5, r24	; 0x05
 340:	9f e0       	ldi	r25, 0x0F	; 15
 342:	9e 83       	std	Y+6, r25	; 0x06
 344:	8f 83       	std	Y+7, r24	; 0x07
 346:	37 c0       	rjmp	.+110    	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	five				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  5 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11110000; line_data[7] = 0b11111111; break;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	8b 83       	std	Y+3, r24	; 0x03
 34c:	8c 83       	std	Y+4, r24	; 0x04
 34e:	8d 83       	std	Y+5, r24	; 0x05
 350:	90 ef       	ldi	r25, 0xF0	; 240
 352:	9e 83       	std	Y+6, r25	; 0x06
 354:	8f 83       	std	Y+7, r24	; 0x07
 356:	2f c0       	rjmp	.+94     	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	six					   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  6 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b00011111; break;
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	8b 83       	std	Y+3, r24	; 0x03
 35c:	8c 83       	std	Y+4, r24	; 0x04
 35e:	8d 83       	std	Y+5, r24	; 0x05
 360:	8e 83       	std	Y+6, r24	; 0x06
 362:	8f e1       	ldi	r24, 0x1F	; 31
 364:	8f 83       	std	Y+7, r24	; 0x07
 366:	27 c0       	rjmp	.+78     	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	seven				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  7 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11100000; break;
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	8b 83       	std	Y+3, r24	; 0x03
 36c:	8c 83       	std	Y+4, r24	; 0x04
 36e:	8d 83       	std	Y+5, r24	; 0x05
 370:	8e 83       	std	Y+6, r24	; 0x06
 372:	80 ee       	ldi	r24, 0xE0	; 224
 374:	8f 83       	std	Y+7, r24	; 0x07
 376:	1f c0       	rjmp	.+62     	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	eight				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  8 : line_data[3] = 0b11100000; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 378:	80 ee       	ldi	r24, 0xE0	; 224
 37a:	8b 83       	std	Y+3, r24	; 0x03
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	8c 83       	std	Y+4, r24	; 0x04
 380:	8d 83       	std	Y+5, r24	; 0x05
 382:	8e 83       	std	Y+6, r24	; 0x06
 384:	8f 83       	std	Y+7, r24	; 0x07
 386:	17 c0       	rjmp	.+46     	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	nine				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case  9 : line_data[3] = 0b00001111; line_data[4] = 0b11111111; line_data[5] = 0b11111111; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 388:	8f e0       	ldi	r24, 0x0F	; 15
 38a:	8b 83       	std	Y+3, r24	; 0x03
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	8c 83       	std	Y+4, r24	; 0x04
 390:	8d 83       	std	Y+5, r24	; 0x05
 392:	8e 83       	std	Y+6, r24	; 0x06
 394:	8f 83       	std	Y+7, r24	; 0x07
 396:	0f c0       	rjmp	.+30     	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	ten					   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case 10 : line_data[3] = 0b11111110; line_data[4] = 0b11111110; line_data[5] = 0b11111110; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 398:	8e ef       	ldi	r24, 0xFE	; 254
 39a:	8b 83       	std	Y+3, r24	; 0x03
 39c:	8c 83       	std	Y+4, r24	; 0x04
 39e:	8d 83       	std	Y+5, r24	; 0x05
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	8e 83       	std	Y+6, r24	; 0x06
 3a4:	8f 83       	std	Y+7, r24	; 0x07
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <hours_to_matrix+0xda>
		
		// 	eleven				   NINEIGHT					  ONETHREE					 TWELEVEN					FOURFIVE				   SIXSEVEN
		case 11 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11000000; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	8b 83       	std	Y+3, r24	; 0x03
 3ac:	8c 83       	std	Y+4, r24	; 0x04
 3ae:	90 ec       	ldi	r25, 0xC0	; 192
 3b0:	9d 83       	std	Y+5, r25	; 0x05
 3b2:	8e 83       	std	Y+6, r24	; 0x06
 3b4:	8f 83       	std	Y+7, r24	; 0x07
	}
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <display>:

void display(uint8_t *line_data)
{
 3bc:	4f 92       	push	r4
 3be:	5f 92       	push	r5
 3c0:	6f 92       	push	r6
 3c2:	7f 92       	push	r7
 3c4:	8f 92       	push	r8
 3c6:	9f 92       	push	r9
 3c8:	af 92       	push	r10
 3ca:	bf 92       	push	r11
 3cc:	cf 92       	push	r12
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	cd b7       	in	r28, 0x3d	; 61
 3de:	de b7       	in	r29, 0x3e	; 62
 3e0:	28 97       	sbiw	r28, 0x08	; 8
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	3c 01       	movw	r6, r24
 3ee:	ce 01       	movw	r24, r28
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	4c 01       	movw	r8, r24
 3f4:	2e 01       	movw	r4, r28
 3f6:	99 e0       	ldi	r25, 0x09	; 9
 3f8:	49 0e       	add	r4, r25
 3fa:	51 1c       	adc	r5, r1
	uint8_t i, temp, temprev[8];
	uint16_t y;
	
	for(i=0; i<8; i++)
	{
		temprev[i] = (line_data[i] * 0x0202020202ULL & 0x010884422010ULL) % 1023;   // Reverse binary (0babcdefgh --> 0bhgfedcba)
 3fc:	f3 01       	movw	r30, r6
 3fe:	21 91       	ld	r18, Z+
 400:	3f 01       	movw	r6, r30
 402:	68 94       	set
 404:	aa 24       	eor	r10, r10
 406:	a1 f8       	bld	r10, 1
 408:	68 94       	set
 40a:	bb 24       	eor	r11, r11
 40c:	b1 f8       	bld	r11, 1
 40e:	68 94       	set
 410:	cc 24       	eor	r12, r12
 412:	c1 f8       	bld	r12, 1
 414:	68 94       	set
 416:	dd 24       	eor	r13, r13
 418:	d1 f8       	bld	r13, 1
 41a:	68 94       	set
 41c:	ee 24       	eor	r14, r14
 41e:	e1 f8       	bld	r14, 1
 420:	f1 2c       	mov	r15, r1
 422:	00 e0       	ldi	r16, 0x00	; 0
 424:	10 e0       	ldi	r17, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__muldi3>
 438:	20 71       	andi	r18, 0x10	; 16
 43a:	30 72       	andi	r19, 0x20	; 32
 43c:	42 74       	andi	r20, 0x42	; 66
 43e:	54 78       	andi	r21, 0x84	; 132
 440:	68 70       	andi	r22, 0x08	; 8
 442:	71 70       	andi	r23, 0x01	; 1
 444:	aa 24       	eor	r10, r10
 446:	aa 94       	dec	r10
 448:	0f 2e       	mov	r0, r31
 44a:	f3 e0       	ldi	r31, 0x03	; 3
 44c:	bf 2e       	mov	r11, r31
 44e:	f0 2d       	mov	r31, r0
 450:	c1 2c       	mov	r12, r1
 452:	d1 2c       	mov	r13, r1
 454:	e1 2c       	mov	r14, r1
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umoddi3>
 45e:	f4 01       	movw	r30, r8
 460:	21 93       	st	Z+, r18
 462:	4f 01       	movw	r8, r30
void display(uint8_t *line_data)
{
	uint8_t i, temp, temprev[8];
	uint16_t y;
	
	for(i=0; i<8; i++)
 464:	e4 15       	cp	r30, r4
 466:	f5 05       	cpc	r31, r5
 468:	49 f6       	brne	.-110    	; 0x3fc <display+0x40>
 46a:	23 ee       	ldi	r18, 0xE3	; 227
 46c:	34 e0       	ldi	r19, 0x04	; 4
 46e:	82 c0       	rjmp	.+260    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 470:	4f 5f       	subi	r20, 0xFF	; 255
 472:	ef ef       	ldi	r30, 0xFF	; 255
 474:	e4 0f       	add	r30, r20
		
	for(y=0; y<1251; y++)
	{
		for(i=0; i<8; i++)
		{
			temp = temprev[i] & 0b00011111;		// Only the 5 LSB are needed
 476:	a1 e0       	ldi	r26, 0x01	; 1
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	ac 0f       	add	r26, r28
 47c:	bd 1f       	adc	r27, r29
 47e:	ae 0f       	add	r26, r30
 480:	b1 1d       	adc	r27, r1
 482:	8c 91       	ld	r24, X
 484:	8f 71       	andi	r24, 0x1F	; 31
			PORTB &= 0b11100000;				// Clear the 5 LSB of PORTB
 486:	98 b3       	in	r25, 0x18	; 24
 488:	90 7e       	andi	r25, 0xE0	; 224
 48a:	98 bb       	out	0x18, r25	; 24
			PORTB |= temp;						// Set the 5 LSB of PORTB to line_data according to schematics
 48c:	98 b3       	in	r25, 0x18	; 24
 48e:	89 2b       	or	r24, r25
 490:	88 bb       	out	0x18, r24	; 24
			
			temp = temprev[i]>>5;				// Shift 5 times to the right, to keep only the 3 MSB
 492:	8c 91       	ld	r24, X
 494:	82 95       	swap	r24
 496:	86 95       	lsr	r24
 498:	87 70       	andi	r24, 0x07	; 7
			temp = temp<<4;						// Shift 4 times to the left
			PORTA &= 0b10001111;				// Clear the needed bits of PORTA
 49a:	9b b3       	in	r25, 0x1b	; 27
 49c:	9f 78       	andi	r25, 0x8F	; 143
 49e:	9b bb       	out	0x1b, r25	; 27
			PORTA |= temp;						// Set the needed bits of PORTA to line_data according to schematics
 4a0:	9b b3       	in	r25, 0x1b	; 27
 4a2:	82 95       	swap	r24
 4a4:	80 7f       	andi	r24, 0xF0	; 240
 4a6:	89 2b       	or	r24, r25
 4a8:	8b bb       	out	0x1b, r24	; 27
			
			switch(i)
 4aa:	8e 2f       	mov	r24, r30
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	88 30       	cpi	r24, 0x08	; 8
 4b0:	91 05       	cpc	r25, r1
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b4:	53 c0       	rjmp	.+166    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 4b6:	fc 01       	movw	r30, r24
 4b8:	ee 58       	subi	r30, 0x8E	; 142
 4ba:	ff 4f       	sbci	r31, 0xFF	; 255
 4bc:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__tablejump2__>
			{
				case 0 : PORTC |=  (1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 4c0:	af 9a       	sbi	0x15, 7	; 21
 4c2:	ae 98       	cbi	0x15, 6	; 21
 4c4:	ad 98       	cbi	0x15, 5	; 21
 4c6:	ac 98       	cbi	0x15, 4	; 21
 4c8:	d8 98       	cbi	0x1b, 0	; 27
 4ca:	d9 98       	cbi	0x1b, 1	; 27
 4cc:	da 98       	cbi	0x1b, 2	; 27
 4ce:	db 98       	cbi	0x1b, 3	; 27
 4d0:	62 c0       	rjmp	.+196    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				case 1 : PORTC &= ~(1<<7); PORTC |=  (1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 4d2:	af 98       	cbi	0x15, 7	; 21
 4d4:	ae 9a       	sbi	0x15, 6	; 21
 4d6:	ad 98       	cbi	0x15, 5	; 21
 4d8:	ac 98       	cbi	0x15, 4	; 21
 4da:	d8 98       	cbi	0x1b, 0	; 27
 4dc:	d9 98       	cbi	0x1b, 1	; 27
 4de:	da 98       	cbi	0x1b, 2	; 27
 4e0:	db 98       	cbi	0x1b, 3	; 27
 4e2:	59 c0       	rjmp	.+178    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				case 2 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC |=  (1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 4e4:	af 98       	cbi	0x15, 7	; 21
 4e6:	ae 98       	cbi	0x15, 6	; 21
 4e8:	ad 9a       	sbi	0x15, 5	; 21
 4ea:	ac 98       	cbi	0x15, 4	; 21
 4ec:	d8 98       	cbi	0x1b, 0	; 27
 4ee:	d9 98       	cbi	0x1b, 1	; 27
 4f0:	da 98       	cbi	0x1b, 2	; 27
 4f2:	db 98       	cbi	0x1b, 3	; 27
 4f4:	50 c0       	rjmp	.+160    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				case 3 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC |=  (1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 4f6:	af 98       	cbi	0x15, 7	; 21
 4f8:	ae 98       	cbi	0x15, 6	; 21
 4fa:	ad 98       	cbi	0x15, 5	; 21
 4fc:	ac 9a       	sbi	0x15, 4	; 21
 4fe:	d8 98       	cbi	0x1b, 0	; 27
 500:	d9 98       	cbi	0x1b, 1	; 27
 502:	da 98       	cbi	0x1b, 2	; 27
 504:	db 98       	cbi	0x1b, 3	; 27
 506:	47 c0       	rjmp	.+142    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				case 4 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA |=  (1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 508:	af 98       	cbi	0x15, 7	; 21
 50a:	ae 98       	cbi	0x15, 6	; 21
 50c:	ad 98       	cbi	0x15, 5	; 21
 50e:	ac 98       	cbi	0x15, 4	; 21
 510:	d8 9a       	sbi	0x1b, 0	; 27
 512:	d9 98       	cbi	0x1b, 1	; 27
 514:	da 98       	cbi	0x1b, 2	; 27
 516:	db 98       	cbi	0x1b, 3	; 27
 518:	3e c0       	rjmp	.+124    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				case 5 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA |=  (1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); break;
 51a:	af 98       	cbi	0x15, 7	; 21
 51c:	ae 98       	cbi	0x15, 6	; 21
 51e:	ad 98       	cbi	0x15, 5	; 21
 520:	ac 98       	cbi	0x15, 4	; 21
 522:	d8 98       	cbi	0x1b, 0	; 27
 524:	d9 9a       	sbi	0x1b, 1	; 27
 526:	da 98       	cbi	0x1b, 2	; 27
 528:	db 98       	cbi	0x1b, 3	; 27
 52a:	35 c0       	rjmp	.+106    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				case 6 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA |=  (1<<2); PORTA &= ~(1<<3); break;
 52c:	af 98       	cbi	0x15, 7	; 21
 52e:	ae 98       	cbi	0x15, 6	; 21
 530:	ad 98       	cbi	0x15, 5	; 21
 532:	ac 98       	cbi	0x15, 4	; 21
 534:	d8 98       	cbi	0x1b, 0	; 27
 536:	d9 98       	cbi	0x1b, 1	; 27
 538:	da 9a       	sbi	0x1b, 2	; 27
 53a:	db 98       	cbi	0x1b, 3	; 27
 53c:	2c c0       	rjmp	.+88     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				case 7 : PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA |=  (1<<3); break;
 53e:	af 98       	cbi	0x15, 7	; 21
 540:	ae 98       	cbi	0x15, 6	; 21
 542:	ad 98       	cbi	0x15, 5	; 21
 544:	ac 98       	cbi	0x15, 4	; 21
 546:	d8 98       	cbi	0x1b, 0	; 27
 548:	d9 98       	cbi	0x1b, 1	; 27
 54a:	da 98       	cbi	0x1b, 2	; 27
 54c:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54e:	89 ef       	ldi	r24, 0xF9	; 249
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 556:	00 c0       	rjmp	.+0      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 558:	00 00       	nop
 55a:	09 c0       	rjmp	.+18     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 55c:	e9 ef       	ldi	r30, 0xF9	; 249
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	31 97       	sbiw	r30, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 564:	00 c0       	rjmp	.+0      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 566:	00 00       	nop
		temprev[i] = (line_data[i] * 0x0202020202ULL & 0x010884422010ULL) % 1023;   // Reverse binary (0babcdefgh --> 0bhgfedcba)
	}
		
	for(y=0; y<1251; y++)
	{
		for(i=0; i<8; i++)
 568:	48 30       	cpi	r20, 0x08	; 8
 56a:	08 f4       	brcc	.+2      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56c:	81 cf       	rjmp	.-254    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	31 09       	sbc	r19, r1
	for(i=0; i<8; i++)
	{
		temprev[i] = (line_data[i] * 0x0202020202ULL & 0x010884422010ULL) % 1023;   // Reverse binary (0babcdefgh --> 0bhgfedcba)
	}
		
	for(y=0; y<1251; y++)
 572:	11 f0       	breq	.+4      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
		case 11 : line_data[3] = 0b11111111; line_data[4] = 0b11111111; line_data[5] = 0b11000000; line_data[6] = 0b11111111; line_data[7] = 0b11111111; break;
	}
}

void display(uint8_t *line_data)
{
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	7d cf       	rjmp	.-262    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			}
			_delay_ms(1);						// 1ms delay between each line = multiplexing at 1/(8*0.001s) = 125Hz
		}
		// 8ms passed, do it again 1250 times to display for 10s
	}
	PORTC &= ~(1<<7); PORTC &= ~(1<<6); PORTC &= ~(1<<5); PORTC &= ~(1<<4); PORTA &= ~(1<<0); PORTA &= ~(1<<1); PORTA &= ~(1<<2); PORTA &= ~(1<<3); // Display is off
 578:	af 98       	cbi	0x15, 7	; 21
 57a:	ae 98       	cbi	0x15, 6	; 21
 57c:	ad 98       	cbi	0x15, 5	; 21
 57e:	ac 98       	cbi	0x15, 4	; 21
 580:	d8 98       	cbi	0x1b, 0	; 27
 582:	d9 98       	cbi	0x1b, 1	; 27
 584:	da 98       	cbi	0x1b, 2	; 27
 586:	db 98       	cbi	0x1b, 3	; 27
	PORTB &= 0b11100000;						// Display is off
 588:	88 b3       	in	r24, 0x18	; 24
 58a:	80 7e       	andi	r24, 0xE0	; 224
 58c:	88 bb       	out	0x18, r24	; 24
	PORTA &= 0b10001111;						// Display is off
 58e:	8b b3       	in	r24, 0x1b	; 27
 590:	8f 78       	andi	r24, 0x8F	; 143
 592:	8b bb       	out	0x1b, r24	; 27
}
 594:	07 c0       	rjmp	.+14     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 596:	89 ef       	ldi	r24, 0xF9	; 249
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 5a0:	00 00       	nop
 5a2:	66 cf       	rjmp	.-308    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 5a4:	28 96       	adiw	r28, 0x08	; 8
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	de bf       	out	0x3e, r29	; 62
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	cd bf       	out	0x3d, r28	; 61
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	df 90       	pop	r13
 5be:	cf 90       	pop	r12
 5c0:	bf 90       	pop	r11
 5c2:	af 90       	pop	r10
 5c4:	9f 90       	pop	r9
 5c6:	8f 90       	pop	r8
 5c8:	7f 90       	pop	r7
 5ca:	6f 90       	pop	r6
 5cc:	5f 90       	pop	r5
 5ce:	4f 90       	pop	r4
 5d0:	08 95       	ret

000005d2 <sleep>:

void sleep()
{
	PORTD |= (1<<PD4);
 5d2:	94 9a       	sbi	0x12, 4	; 18
	
	ACSR |= (1<<ACD);          					// Disable Analog comparator	
 5d4:	47 9a       	sbi	0x08, 7	; 8
	
	GICR |= (1<<INT1);							// Enable interrupt	INT1
 5d6:	8b b7       	in	r24, 0x3b	; 59
 5d8:	80 68       	ori	r24, 0x80	; 128
 5da:	8b bf       	out	0x3b, r24	; 59
	MCUCR &= ~(1<<ISC11);
 5dc:	85 b7       	in	r24, 0x35	; 53
 5de:	87 7f       	andi	r24, 0xF7	; 247
 5e0:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);						// Enable interrupt on low level of INT1 (only compatible mode with sleep mode wake up on INT1)
 5e2:	85 b7       	in	r24, 0x35	; 53
 5e4:	8b 7f       	andi	r24, 0xFB	; 251
 5e6:	85 bf       	out	0x35, r24	; 53
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);   	 	// Power down mode
 5e8:	85 b7       	in	r24, 0x35	; 53
 5ea:	8f 78       	andi	r24, 0x8F	; 143
 5ec:	80 62       	ori	r24, 0x20	; 32
 5ee:	85 bf       	out	0x35, r24	; 53
	sleep_enable();                        		// Sets the Sleep Enable bit in the MCUCR Register (SE BIT)
 5f0:	85 b7       	in	r24, 0x35	; 53
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	85 bf       	out	0x35, r24	; 53
	sei();                                 		// Enable interrupts
 5f6:	78 94       	sei
	sleep_cpu();                           		// sleep
 5f8:	88 95       	sleep

	//...Wait for interrupt to wake-up MCU...
	
	cli();                                  	// Disable interrupts
 5fa:	f8 94       	cli
	sleep_disable();                        	// Clear Sleep Enable bit (SE bit)
 5fc:	85 b7       	in	r24, 0x35	; 53
 5fe:	8f 77       	andi	r24, 0x7F	; 127
 600:	85 bf       	out	0x35, r24	; 53
 602:	08 95       	ret

00000604 <__vector_2>:
}

ISR(INT1_vect)
{
 604:	1f 92       	push	r1
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	8f 93       	push	r24
	sleep_disable();
 610:	85 b7       	in	r24, 0x35	; 53
 612:	8f 77       	andi	r24, 0x7F	; 127
 614:	85 bf       	out	0x35, r24	; 53
}
 616:	8f 91       	pop	r24
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <io_setup>:

void io_setup()
{
	DDRA = 0x7F;								// PORTA as output except PA7 as input
 622:	8f e7       	ldi	r24, 0x7F	; 127
 624:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;								// PORTB as output
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFC;								// PORTC as output
 62a:	8c ef       	ldi	r24, 0xFC	; 252
 62c:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x14;								// PD3 as input, PD4 and PD2 as outputs
 62e:	84 e1       	ldi	r24, 0x14	; 20
 630:	81 bb       	out	0x11, r24	; 17
		
	PORTA = 0x00;								// All outputs low
 632:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;								// All outputs low
 634:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;								// All outputs low
 636:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x10;								// All outputs low except PD4 (led off)
 638:	80 e1       	ldi	r24, 0x10	; 16
 63a:	82 bb       	out	0x12, r24	; 18
 63c:	08 95       	ret

0000063e <check_battery>:
}

void check_battery(uint8_t *lowbat, uint8_t *critbat)
{
 63e:	cf 92       	push	r12
 640:	df 92       	push	r13
 642:	ef 92       	push	r14
 644:	ff 92       	push	r15
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	ec 01       	movw	r28, r24
 650:	8b 01       	movw	r16, r22
	float adcvalue;
	float voltage;
	
	ADMUX = 0x47;								// Select ADC7 and reference voltage on AVCC (with capacitor to GND at AREF pin)
 652:	87 e4       	ldi	r24, 0x47	; 71
 654:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);			// ADC clock prescaler /8
 656:	86 b1       	in	r24, 0x06	; 6
 658:	83 60       	ori	r24, 0x03	; 3
 65a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);						// Enable ADC
 65c:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);						// Start ADC conversion
 65e:	36 9a       	sbi	0x06, 6	; 6
	loop_until_bit_is_clear(ADCSRA, ADSC); 		// Wait until done
 660:	36 99       	sbic	0x06, 6	; 6
 662:	fe cf       	rjmp	.-4      	; 0x660 <check_battery+0x22>
	adcvalue = ADC;								// Read ADC
 664:	64 b1       	in	r22, 0x04	; 4
 666:	75 b1       	in	r23, 0x05	; 5
	ADCSRA &= ~(1<<ADEN);      					// Disable ADC
 668:	37 98       	cbi	0x06, 7	; 6
	
	voltage = adcvalue*3.3*43/1023/33;			// Actual battery voltage
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatunsisf>
 672:	23 e3       	ldi	r18, 0x33	; 51
 674:	33 e3       	ldi	r19, 0x33	; 51
 676:	43 e5       	ldi	r20, 0x53	; 83
 678:	50 e4       	ldi	r21, 0x40	; 64
 67a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__mulsf3>
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	4c e2       	ldi	r20, 0x2C	; 44
 684:	52 e4       	ldi	r21, 0x42	; 66
 686:	0e 94 07 05 	call	0xa0e	; 0xa0e <__mulsf3>
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	30 ec       	ldi	r19, 0xC0	; 192
 68e:	4f e7       	ldi	r20, 0x7F	; 127
 690:	54 e4       	ldi	r21, 0x44	; 68
 692:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__divsf3>
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	44 e0       	ldi	r20, 0x04	; 4
 69c:	52 e4       	ldi	r21, 0x42	; 66
 69e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__divsf3>
 6a2:	6b 01       	movw	r12, r22
 6a4:	7c 01       	movw	r14, r24
	
	if(voltage < V_LOWBAT) *lowbat = 1;
 6a6:	2a e9       	ldi	r18, 0x9A	; 154
 6a8:	39 e9       	ldi	r19, 0x99	; 153
 6aa:	49 e5       	ldi	r20, 0x59	; 89
 6ac:	50 e4       	ldi	r21, 0x40	; 64
 6ae:	0e 94 de 03 	call	0x7bc	; 0x7bc <__cmpsf2>
 6b2:	88 23       	and	r24, r24
 6b4:	1c f4       	brge	.+6      	; 0x6bc <check_battery+0x7e>
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	88 83       	st	Y, r24
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <check_battery+0x80>
	else *lowbat = 0;
 6bc:	18 82       	st	Y, r1
	if(voltage < V_CRITBAT) *critbat = 1;
 6be:	23 e3       	ldi	r18, 0x33	; 51
 6c0:	33 e3       	ldi	r19, 0x33	; 51
 6c2:	43 e5       	ldi	r20, 0x53	; 83
 6c4:	50 e4       	ldi	r21, 0x40	; 64
 6c6:	c7 01       	movw	r24, r14
 6c8:	b6 01       	movw	r22, r12
 6ca:	0e 94 de 03 	call	0x7bc	; 0x7bc <__cmpsf2>
 6ce:	88 23       	and	r24, r24
 6d0:	24 f4       	brge	.+8      	; 0x6da <check_battery+0x9c>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	f8 01       	movw	r30, r16
 6d6:	80 83       	st	Z, r24
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <check_battery+0xa0>
	else *critbat = 0;
 6da:	f8 01       	movw	r30, r16
 6dc:	10 82       	st	Z, r1
}
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	08 95       	ret

000006f0 <main>:
void io_setup();
void check_battery(uint8_t *lowbat, uint8_t *critbat);


int main()
{
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	2e 97       	sbiw	r28, 0x0e	; 14
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	f8 94       	cli
 6fe:	de bf       	out	0x3e, r29	; 62
 700:	0f be       	out	0x3f, r0	; 63
 702:	cd bf       	out	0x3d, r28	; 61
	uint8_t hour, min, sec, am_pm, data[8]={0}, low_battery=0, critical_battery=0, i;
 704:	fe 01       	movw	r30, r28
 706:	35 96       	adiw	r30, 0x05	; 5
 708:	88 e0       	ldi	r24, 0x08	; 8
 70a:	df 01       	movw	r26, r30
 70c:	1d 92       	st	X+, r1
 70e:	8a 95       	dec	r24
 710:	e9 f7       	brne	.-6      	; 0x70c <main+0x1c>
 712:	1d 86       	std	Y+13, r1	; 0x0d
 714:	1e 86       	std	Y+14, r1	; 0x0e

	io_setup();
 716:	0e 94 11 03 	call	0x622	; 0x622 <io_setup>
	PORTD |= (1<<PD2);					// Give power to RTC
 71a:	92 9a       	sbi	0x12, 2	; 18
	i2c_init();
 71c:	0e 94 86 00 	call	0x10c	; 0x10c <i2c_init>
	PORTD &= ~(1<<PD2);					// Cut power to RTC	
 720:	92 98       	cbi	0x12, 2	; 18
	
	PORTD |= (1<<PD2);					// Give power to RTC
 722:	92 9a       	sbi	0x12, 2	; 18
	//rtc_set_time_12h(10,0,0,1);		// Set time to 10:00:00 PM, do it once to set RTC, then comment tis line and reflash
										// code to MCU (to prevent RTC from initiating to 10:00:00 PM each time on MCU reset)
	PORTD &= ~(1<<PD2);					// Cut power to RTC	
 724:	92 98       	cbi	0x12, 2	; 18
		if(low_battery) PORTD &= ~(1<<PD4);		// if battery is low, turn on an led
		if(critical_battery)					// if battery is critical, flash on and off an led and does not run
		{
			for(i=0; i<10; i++)
			{
				PORTD ^= (1<<PD4);
 726:	10 e1       	ldi	r17, 0x10	; 16
										// code to MCU (to prevent RTC from initiating to 10:00:00 PM each time on MCU reset)
	PORTD &= ~(1<<PD2);					// Cut power to RTC	
	
	while (1)
	{
		sleep();
 728:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <sleep>
		check_battery(&low_battery, &critical_battery);
 72c:	be 01       	movw	r22, r28
 72e:	62 5f       	subi	r22, 0xF2	; 242
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	ce 01       	movw	r24, r28
 734:	0d 96       	adiw	r24, 0x0d	; 13
 736:	0e 94 1f 03 	call	0x63e	; 0x63e <check_battery>
		if(low_battery) PORTD &= ~(1<<PD4);		// if battery is low, turn on an led
 73a:	8d 85       	ldd	r24, Y+13	; 0x0d
 73c:	88 23       	and	r24, r24
 73e:	d1 f1       	breq	.+116    	; 0x7b4 <main+0xc4>
 740:	94 98       	cbi	0x12, 4	; 18
		if(critical_battery)					// if battery is critical, flash on and off an led and does not run
 742:	8e 85       	ldd	r24, Y+14	; 0x0e
 744:	88 23       	and	r24, r24
 746:	71 f0       	breq	.+28     	; 0x764 <main+0x74>
void io_setup();
void check_battery(uint8_t *lowbat, uint8_t *critbat);


int main()
{
 748:	9a e0       	ldi	r25, 0x0A	; 10
		if(low_battery) PORTD &= ~(1<<PD4);		// if battery is low, turn on an led
		if(critical_battery)					// if battery is critical, flash on and off an led and does not run
		{
			for(i=0; i<10; i++)
			{
				PORTD ^= (1<<PD4);
 74a:	82 b3       	in	r24, 0x12	; 18
 74c:	81 27       	eor	r24, r17
 74e:	82 bb       	out	0x12, r24	; 18
 750:	e3 e2       	ldi	r30, 0x23	; 35
 752:	f4 ef       	ldi	r31, 0xF4	; 244
 754:	31 97       	sbiw	r30, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <main+0x64>
 758:	00 c0       	rjmp	.+0      	; 0x75a <main+0x6a>
 75a:	00 00       	nop
 75c:	91 50       	subi	r25, 0x01	; 1
		sleep();
		check_battery(&low_battery, &critical_battery);
		if(low_battery) PORTD &= ~(1<<PD4);		// if battery is low, turn on an led
		if(critical_battery)					// if battery is critical, flash on and off an led and does not run
		{
			for(i=0; i<10; i++)
 75e:	a9 f7       	brne	.-22     	; 0x74a <main+0x5a>
			{
				PORTD ^= (1<<PD4);
				_delay_ms(250);
			}
			PORTD |= (1<<PD4);
 760:	94 9a       	sbi	0x12, 4	; 18
 762:	e2 cf       	rjmp	.-60     	; 0x728 <main+0x38>
		}
		else
		{
			PORTD |= (1<<PD2);								// Give power to RTC
 764:	92 9a       	sbi	0x12, 2	; 18
			i2c_init();
 766:	0e 94 86 00 	call	0x10c	; 0x10c <i2c_init>
			rtc_get_time_12h(&hour, &min, &sec, &am_pm);	// Get time
 76a:	9e 01       	movw	r18, r28
 76c:	2c 5f       	subi	r18, 0xFC	; 252
 76e:	3f 4f       	sbci	r19, 0xFF	; 255
 770:	ae 01       	movw	r20, r28
 772:	4d 5f       	subi	r20, 0xFD	; 253
 774:	5f 4f       	sbci	r21, 0xFF	; 255
 776:	be 01       	movw	r22, r28
 778:	6e 5f       	subi	r22, 0xFE	; 254
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	0e 94 cf 00 	call	0x19e	; 0x19e <rtc_get_time_12h>
			PORTD &= ~(1<<PD2);								// Cut power to RTC
 784:	92 98       	cbi	0x12, 2	; 18
			
			minutes_to_matrix(min, data);
 786:	be 01       	movw	r22, r28
 788:	6b 5f       	subi	r22, 0xFB	; 251
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8a 81       	ldd	r24, Y+2	; 0x02
 78e:	0e 94 0d 01 	call	0x21a	; 0x21a <minutes_to_matrix>
			if(min>30)hour++;
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	8f 31       	cpi	r24, 0x1F	; 31
 796:	18 f0       	brcs	.+6      	; 0x79e <main+0xae>
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	8f 5f       	subi	r24, 0xFF	; 255
 79c:	89 83       	std	Y+1, r24	; 0x01
			hours_to_matrix(hour, data);
 79e:	be 01       	movw	r22, r28
 7a0:	6b 5f       	subi	r22, 0xFB	; 251
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <hours_to_matrix>
			display(data);
 7aa:	ce 01       	movw	r24, r28
 7ac:	05 96       	adiw	r24, 0x05	; 5
 7ae:	0e 94 de 01 	call	0x3bc	; 0x3bc <display>
 7b2:	ba cf       	rjmp	.-140    	; 0x728 <main+0x38>
	while (1)
	{
		sleep();
		check_battery(&low_battery, &critical_battery);
		if(low_battery) PORTD &= ~(1<<PD4);		// if battery is low, turn on an led
		if(critical_battery)					// if battery is critical, flash on and off an led and does not run
 7b4:	8e 85       	ldd	r24, Y+14	; 0x0e
 7b6:	81 11       	cpse	r24, r1
 7b8:	c7 cf       	rjmp	.-114    	; 0x748 <main+0x58>
 7ba:	d4 cf       	rjmp	.-88     	; 0x764 <main+0x74>

000007bc <__cmpsf2>:
 7bc:	0e 94 92 04 	call	0x924	; 0x924 <__fp_cmp>
 7c0:	08 f4       	brcc	.+2      	; 0x7c4 <__cmpsf2+0x8>
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	08 95       	ret

000007c6 <__divsf3>:
 7c6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__divsf3x>
 7ca:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_round>
 7ce:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscB>
 7d2:	58 f0       	brcs	.+22     	; 0x7ea <__divsf3+0x24>
 7d4:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_pscA>
 7d8:	40 f0       	brcs	.+16     	; 0x7ea <__divsf3+0x24>
 7da:	29 f4       	brne	.+10     	; 0x7e6 <__divsf3+0x20>
 7dc:	5f 3f       	cpi	r21, 0xFF	; 255
 7de:	29 f0       	breq	.+10     	; 0x7ea <__divsf3+0x24>
 7e0:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_inf>
 7e4:	51 11       	cpse	r21, r1
 7e6:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_szero>
 7ea:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_nan>

000007ee <__divsf3x>:
 7ee:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_split3>
 7f2:	68 f3       	brcs	.-38     	; 0x7ce <__divsf3+0x8>

000007f4 <__divsf3_pse>:
 7f4:	99 23       	and	r25, r25
 7f6:	b1 f3       	breq	.-20     	; 0x7e4 <__divsf3+0x1e>
 7f8:	55 23       	and	r21, r21
 7fa:	91 f3       	breq	.-28     	; 0x7e0 <__divsf3+0x1a>
 7fc:	95 1b       	sub	r25, r21
 7fe:	55 0b       	sbc	r21, r21
 800:	bb 27       	eor	r27, r27
 802:	aa 27       	eor	r26, r26
 804:	62 17       	cp	r22, r18
 806:	73 07       	cpc	r23, r19
 808:	84 07       	cpc	r24, r20
 80a:	38 f0       	brcs	.+14     	; 0x81a <__divsf3_pse+0x26>
 80c:	9f 5f       	subi	r25, 0xFF	; 255
 80e:	5f 4f       	sbci	r21, 0xFF	; 255
 810:	22 0f       	add	r18, r18
 812:	33 1f       	adc	r19, r19
 814:	44 1f       	adc	r20, r20
 816:	aa 1f       	adc	r26, r26
 818:	a9 f3       	breq	.-22     	; 0x804 <__divsf3_pse+0x10>
 81a:	35 d0       	rcall	.+106    	; 0x886 <__stack+0x27>
 81c:	0e 2e       	mov	r0, r30
 81e:	3a f0       	brmi	.+14     	; 0x82e <__divsf3_pse+0x3a>
 820:	e0 e8       	ldi	r30, 0x80	; 128
 822:	32 d0       	rcall	.+100    	; 0x888 <__stack+0x29>
 824:	91 50       	subi	r25, 0x01	; 1
 826:	50 40       	sbci	r21, 0x00	; 0
 828:	e6 95       	lsr	r30
 82a:	00 1c       	adc	r0, r0
 82c:	ca f7       	brpl	.-14     	; 0x820 <__divsf3_pse+0x2c>
 82e:	2b d0       	rcall	.+86     	; 0x886 <__stack+0x27>
 830:	fe 2f       	mov	r31, r30
 832:	29 d0       	rcall	.+82     	; 0x886 <__stack+0x27>
 834:	66 0f       	add	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	bb 1f       	adc	r27, r27
 83c:	26 17       	cp	r18, r22
 83e:	37 07       	cpc	r19, r23
 840:	48 07       	cpc	r20, r24
 842:	ab 07       	cpc	r26, r27
 844:	b0 e8       	ldi	r27, 0x80	; 128
 846:	09 f0       	breq	.+2      	; 0x84a <__divsf3_pse+0x56>
 848:	bb 0b       	sbc	r27, r27
 84a:	80 2d       	mov	r24, r0
 84c:	bf 01       	movw	r22, r30
 84e:	ff 27       	eor	r31, r31
 850:	93 58       	subi	r25, 0x83	; 131
 852:	5f 4f       	sbci	r21, 0xFF	; 255
 854:	3a f0       	brmi	.+14     	; 0x864 <__stack+0x5>
 856:	9e 3f       	cpi	r25, 0xFE	; 254
 858:	51 05       	cpc	r21, r1
 85a:	78 f0       	brcs	.+30     	; 0x87a <__stack+0x1b>
 85c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_inf>
 860:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_szero>
 864:	5f 3f       	cpi	r21, 0xFF	; 255
 866:	e4 f3       	brlt	.-8      	; 0x860 <__stack+0x1>
 868:	98 3e       	cpi	r25, 0xE8	; 232
 86a:	d4 f3       	brlt	.-12     	; 0x860 <__stack+0x1>
 86c:	86 95       	lsr	r24
 86e:	77 95       	ror	r23
 870:	67 95       	ror	r22
 872:	b7 95       	ror	r27
 874:	f7 95       	ror	r31
 876:	9f 5f       	subi	r25, 0xFF	; 255
 878:	c9 f7       	brne	.-14     	; 0x86c <__stack+0xd>
 87a:	88 0f       	add	r24, r24
 87c:	91 1d       	adc	r25, r1
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret
 886:	e1 e0       	ldi	r30, 0x01	; 1
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	bb 1f       	adc	r27, r27
 890:	62 17       	cp	r22, r18
 892:	73 07       	cpc	r23, r19
 894:	84 07       	cpc	r24, r20
 896:	ba 07       	cpc	r27, r26
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__stack+0x43>
 89a:	62 1b       	sub	r22, r18
 89c:	73 0b       	sbc	r23, r19
 89e:	84 0b       	sbc	r24, r20
 8a0:	ba 0b       	sbc	r27, r26
 8a2:	ee 1f       	adc	r30, r30
 8a4:	88 f7       	brcc	.-30     	; 0x888 <__stack+0x29>
 8a6:	e0 95       	com	r30
 8a8:	08 95       	ret

000008aa <__floatunsisf>:
 8aa:	e8 94       	clt
 8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <__floatsisf+0x12>

000008ae <__floatsisf>:
 8ae:	97 fb       	bst	r25, 7
 8b0:	3e f4       	brtc	.+14     	; 0x8c0 <__floatsisf+0x12>
 8b2:	90 95       	com	r25
 8b4:	80 95       	com	r24
 8b6:	70 95       	com	r23
 8b8:	61 95       	neg	r22
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	99 23       	and	r25, r25
 8c2:	a9 f0       	breq	.+42     	; 0x8ee <__floatsisf+0x40>
 8c4:	f9 2f       	mov	r31, r25
 8c6:	96 e9       	ldi	r25, 0x96	; 150
 8c8:	bb 27       	eor	r27, r27
 8ca:	93 95       	inc	r25
 8cc:	f6 95       	lsr	r31
 8ce:	87 95       	ror	r24
 8d0:	77 95       	ror	r23
 8d2:	67 95       	ror	r22
 8d4:	b7 95       	ror	r27
 8d6:	f1 11       	cpse	r31, r1
 8d8:	f8 cf       	rjmp	.-16     	; 0x8ca <__floatsisf+0x1c>
 8da:	fa f4       	brpl	.+62     	; 0x91a <__floatsisf+0x6c>
 8dc:	bb 0f       	add	r27, r27
 8de:	11 f4       	brne	.+4      	; 0x8e4 <__floatsisf+0x36>
 8e0:	60 ff       	sbrs	r22, 0
 8e2:	1b c0       	rjmp	.+54     	; 0x91a <__floatsisf+0x6c>
 8e4:	6f 5f       	subi	r22, 0xFF	; 255
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	16 c0       	rjmp	.+44     	; 0x91a <__floatsisf+0x6c>
 8ee:	88 23       	and	r24, r24
 8f0:	11 f0       	breq	.+4      	; 0x8f6 <__floatsisf+0x48>
 8f2:	96 e9       	ldi	r25, 0x96	; 150
 8f4:	11 c0       	rjmp	.+34     	; 0x918 <__floatsisf+0x6a>
 8f6:	77 23       	and	r23, r23
 8f8:	21 f0       	breq	.+8      	; 0x902 <__floatsisf+0x54>
 8fa:	9e e8       	ldi	r25, 0x8E	; 142
 8fc:	87 2f       	mov	r24, r23
 8fe:	76 2f       	mov	r23, r22
 900:	05 c0       	rjmp	.+10     	; 0x90c <__floatsisf+0x5e>
 902:	66 23       	and	r22, r22
 904:	71 f0       	breq	.+28     	; 0x922 <__floatsisf+0x74>
 906:	96 e8       	ldi	r25, 0x86	; 134
 908:	86 2f       	mov	r24, r22
 90a:	70 e0       	ldi	r23, 0x00	; 0
 90c:	60 e0       	ldi	r22, 0x00	; 0
 90e:	2a f0       	brmi	.+10     	; 0x91a <__floatsisf+0x6c>
 910:	9a 95       	dec	r25
 912:	66 0f       	add	r22, r22
 914:	77 1f       	adc	r23, r23
 916:	88 1f       	adc	r24, r24
 918:	da f7       	brpl	.-10     	; 0x910 <__floatsisf+0x62>
 91a:	88 0f       	add	r24, r24
 91c:	96 95       	lsr	r25
 91e:	87 95       	ror	r24
 920:	97 f9       	bld	r25, 7
 922:	08 95       	ret

00000924 <__fp_cmp>:
 924:	99 0f       	add	r25, r25
 926:	00 08       	sbc	r0, r0
 928:	55 0f       	add	r21, r21
 92a:	aa 0b       	sbc	r26, r26
 92c:	e0 e8       	ldi	r30, 0x80	; 128
 92e:	fe ef       	ldi	r31, 0xFE	; 254
 930:	16 16       	cp	r1, r22
 932:	17 06       	cpc	r1, r23
 934:	e8 07       	cpc	r30, r24
 936:	f9 07       	cpc	r31, r25
 938:	c0 f0       	brcs	.+48     	; 0x96a <__fp_cmp+0x46>
 93a:	12 16       	cp	r1, r18
 93c:	13 06       	cpc	r1, r19
 93e:	e4 07       	cpc	r30, r20
 940:	f5 07       	cpc	r31, r21
 942:	98 f0       	brcs	.+38     	; 0x96a <__fp_cmp+0x46>
 944:	62 1b       	sub	r22, r18
 946:	73 0b       	sbc	r23, r19
 948:	84 0b       	sbc	r24, r20
 94a:	95 0b       	sbc	r25, r21
 94c:	39 f4       	brne	.+14     	; 0x95c <__fp_cmp+0x38>
 94e:	0a 26       	eor	r0, r26
 950:	61 f0       	breq	.+24     	; 0x96a <__fp_cmp+0x46>
 952:	23 2b       	or	r18, r19
 954:	24 2b       	or	r18, r20
 956:	25 2b       	or	r18, r21
 958:	21 f4       	brne	.+8      	; 0x962 <__fp_cmp+0x3e>
 95a:	08 95       	ret
 95c:	0a 26       	eor	r0, r26
 95e:	09 f4       	brne	.+2      	; 0x962 <__fp_cmp+0x3e>
 960:	a1 40       	sbci	r26, 0x01	; 1
 962:	a6 95       	lsr	r26
 964:	8f ef       	ldi	r24, 0xFF	; 255
 966:	81 1d       	adc	r24, r1
 968:	81 1d       	adc	r24, r1
 96a:	08 95       	ret

0000096c <__fp_inf>:
 96c:	97 f9       	bld	r25, 7
 96e:	9f 67       	ori	r25, 0x7F	; 127
 970:	80 e8       	ldi	r24, 0x80	; 128
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	08 95       	ret

00000978 <__fp_nan>:
 978:	9f ef       	ldi	r25, 0xFF	; 255
 97a:	80 ec       	ldi	r24, 0xC0	; 192
 97c:	08 95       	ret

0000097e <__fp_pscA>:
 97e:	00 24       	eor	r0, r0
 980:	0a 94       	dec	r0
 982:	16 16       	cp	r1, r22
 984:	17 06       	cpc	r1, r23
 986:	18 06       	cpc	r1, r24
 988:	09 06       	cpc	r0, r25
 98a:	08 95       	ret

0000098c <__fp_pscB>:
 98c:	00 24       	eor	r0, r0
 98e:	0a 94       	dec	r0
 990:	12 16       	cp	r1, r18
 992:	13 06       	cpc	r1, r19
 994:	14 06       	cpc	r1, r20
 996:	05 06       	cpc	r0, r21
 998:	08 95       	ret

0000099a <__fp_round>:
 99a:	09 2e       	mov	r0, r25
 99c:	03 94       	inc	r0
 99e:	00 0c       	add	r0, r0
 9a0:	11 f4       	brne	.+4      	; 0x9a6 <__fp_round+0xc>
 9a2:	88 23       	and	r24, r24
 9a4:	52 f0       	brmi	.+20     	; 0x9ba <__fp_round+0x20>
 9a6:	bb 0f       	add	r27, r27
 9a8:	40 f4       	brcc	.+16     	; 0x9ba <__fp_round+0x20>
 9aa:	bf 2b       	or	r27, r31
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <__fp_round+0x18>
 9ae:	60 ff       	sbrs	r22, 0
 9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__fp_round+0x20>
 9b2:	6f 5f       	subi	r22, 0xFF	; 255
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	08 95       	ret

000009bc <__fp_split3>:
 9bc:	57 fd       	sbrc	r21, 7
 9be:	90 58       	subi	r25, 0x80	; 128
 9c0:	44 0f       	add	r20, r20
 9c2:	55 1f       	adc	r21, r21
 9c4:	59 f0       	breq	.+22     	; 0x9dc <__fp_splitA+0x10>
 9c6:	5f 3f       	cpi	r21, 0xFF	; 255
 9c8:	71 f0       	breq	.+28     	; 0x9e6 <__fp_splitA+0x1a>
 9ca:	47 95       	ror	r20

000009cc <__fp_splitA>:
 9cc:	88 0f       	add	r24, r24
 9ce:	97 fb       	bst	r25, 7
 9d0:	99 1f       	adc	r25, r25
 9d2:	61 f0       	breq	.+24     	; 0x9ec <__fp_splitA+0x20>
 9d4:	9f 3f       	cpi	r25, 0xFF	; 255
 9d6:	79 f0       	breq	.+30     	; 0x9f6 <__fp_splitA+0x2a>
 9d8:	87 95       	ror	r24
 9da:	08 95       	ret
 9dc:	12 16       	cp	r1, r18
 9de:	13 06       	cpc	r1, r19
 9e0:	14 06       	cpc	r1, r20
 9e2:	55 1f       	adc	r21, r21
 9e4:	f2 cf       	rjmp	.-28     	; 0x9ca <__fp_split3+0xe>
 9e6:	46 95       	lsr	r20
 9e8:	f1 df       	rcall	.-30     	; 0x9cc <__fp_splitA>
 9ea:	08 c0       	rjmp	.+16     	; 0x9fc <__fp_splitA+0x30>
 9ec:	16 16       	cp	r1, r22
 9ee:	17 06       	cpc	r1, r23
 9f0:	18 06       	cpc	r1, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	f1 cf       	rjmp	.-30     	; 0x9d8 <__fp_splitA+0xc>
 9f6:	86 95       	lsr	r24
 9f8:	71 05       	cpc	r23, r1
 9fa:	61 05       	cpc	r22, r1
 9fc:	08 94       	sec
 9fe:	08 95       	ret

00000a00 <__fp_zero>:
 a00:	e8 94       	clt

00000a02 <__fp_szero>:
 a02:	bb 27       	eor	r27, r27
 a04:	66 27       	eor	r22, r22
 a06:	77 27       	eor	r23, r23
 a08:	cb 01       	movw	r24, r22
 a0a:	97 f9       	bld	r25, 7
 a0c:	08 95       	ret

00000a0e <__mulsf3>:
 a0e:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3x>
 a12:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_round>
 a16:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_pscA>
 a1a:	38 f0       	brcs	.+14     	; 0xa2a <__mulsf3+0x1c>
 a1c:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscB>
 a20:	20 f0       	brcs	.+8      	; 0xa2a <__mulsf3+0x1c>
 a22:	95 23       	and	r25, r21
 a24:	11 f0       	breq	.+4      	; 0xa2a <__mulsf3+0x1c>
 a26:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_inf>
 a2a:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_nan>
 a2e:	11 24       	eor	r1, r1
 a30:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_szero>

00000a34 <__mulsf3x>:
 a34:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_split3>
 a38:	70 f3       	brcs	.-36     	; 0xa16 <__mulsf3+0x8>

00000a3a <__mulsf3_pse>:
 a3a:	95 9f       	mul	r25, r21
 a3c:	c1 f3       	breq	.-16     	; 0xa2e <__mulsf3+0x20>
 a3e:	95 0f       	add	r25, r21
 a40:	50 e0       	ldi	r21, 0x00	; 0
 a42:	55 1f       	adc	r21, r21
 a44:	62 9f       	mul	r22, r18
 a46:	f0 01       	movw	r30, r0
 a48:	72 9f       	mul	r23, r18
 a4a:	bb 27       	eor	r27, r27
 a4c:	f0 0d       	add	r31, r0
 a4e:	b1 1d       	adc	r27, r1
 a50:	63 9f       	mul	r22, r19
 a52:	aa 27       	eor	r26, r26
 a54:	f0 0d       	add	r31, r0
 a56:	b1 1d       	adc	r27, r1
 a58:	aa 1f       	adc	r26, r26
 a5a:	64 9f       	mul	r22, r20
 a5c:	66 27       	eor	r22, r22
 a5e:	b0 0d       	add	r27, r0
 a60:	a1 1d       	adc	r26, r1
 a62:	66 1f       	adc	r22, r22
 a64:	82 9f       	mul	r24, r18
 a66:	22 27       	eor	r18, r18
 a68:	b0 0d       	add	r27, r0
 a6a:	a1 1d       	adc	r26, r1
 a6c:	62 1f       	adc	r22, r18
 a6e:	73 9f       	mul	r23, r19
 a70:	b0 0d       	add	r27, r0
 a72:	a1 1d       	adc	r26, r1
 a74:	62 1f       	adc	r22, r18
 a76:	83 9f       	mul	r24, r19
 a78:	a0 0d       	add	r26, r0
 a7a:	61 1d       	adc	r22, r1
 a7c:	22 1f       	adc	r18, r18
 a7e:	74 9f       	mul	r23, r20
 a80:	33 27       	eor	r19, r19
 a82:	a0 0d       	add	r26, r0
 a84:	61 1d       	adc	r22, r1
 a86:	23 1f       	adc	r18, r19
 a88:	84 9f       	mul	r24, r20
 a8a:	60 0d       	add	r22, r0
 a8c:	21 1d       	adc	r18, r1
 a8e:	82 2f       	mov	r24, r18
 a90:	76 2f       	mov	r23, r22
 a92:	6a 2f       	mov	r22, r26
 a94:	11 24       	eor	r1, r1
 a96:	9f 57       	subi	r25, 0x7F	; 127
 a98:	50 40       	sbci	r21, 0x00	; 0
 a9a:	9a f0       	brmi	.+38     	; 0xac2 <__mulsf3_pse+0x88>
 a9c:	f1 f0       	breq	.+60     	; 0xada <__mulsf3_pse+0xa0>
 a9e:	88 23       	and	r24, r24
 aa0:	4a f0       	brmi	.+18     	; 0xab4 <__mulsf3_pse+0x7a>
 aa2:	ee 0f       	add	r30, r30
 aa4:	ff 1f       	adc	r31, r31
 aa6:	bb 1f       	adc	r27, r27
 aa8:	66 1f       	adc	r22, r22
 aaa:	77 1f       	adc	r23, r23
 aac:	88 1f       	adc	r24, r24
 aae:	91 50       	subi	r25, 0x01	; 1
 ab0:	50 40       	sbci	r21, 0x00	; 0
 ab2:	a9 f7       	brne	.-22     	; 0xa9e <__mulsf3_pse+0x64>
 ab4:	9e 3f       	cpi	r25, 0xFE	; 254
 ab6:	51 05       	cpc	r21, r1
 ab8:	80 f0       	brcs	.+32     	; 0xada <__mulsf3_pse+0xa0>
 aba:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_inf>
 abe:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_szero>
 ac2:	5f 3f       	cpi	r21, 0xFF	; 255
 ac4:	e4 f3       	brlt	.-8      	; 0xabe <__mulsf3_pse+0x84>
 ac6:	98 3e       	cpi	r25, 0xE8	; 232
 ac8:	d4 f3       	brlt	.-12     	; 0xabe <__mulsf3_pse+0x84>
 aca:	86 95       	lsr	r24
 acc:	77 95       	ror	r23
 ace:	67 95       	ror	r22
 ad0:	b7 95       	ror	r27
 ad2:	f7 95       	ror	r31
 ad4:	e7 95       	ror	r30
 ad6:	9f 5f       	subi	r25, 0xFF	; 255
 ad8:	c1 f7       	brne	.-16     	; 0xaca <__mulsf3_pse+0x90>
 ada:	fe 2b       	or	r31, r30
 adc:	88 0f       	add	r24, r24
 ade:	91 1d       	adc	r25, r1
 ae0:	96 95       	lsr	r25
 ae2:	87 95       	ror	r24
 ae4:	97 f9       	bld	r25, 7
 ae6:	08 95       	ret

00000ae8 <__tablejump2__>:
 ae8:	ee 0f       	add	r30, r30
 aea:	ff 1f       	adc	r31, r31
 aec:	05 90       	lpm	r0, Z+
 aee:	f4 91       	lpm	r31, Z
 af0:	e0 2d       	mov	r30, r0
 af2:	09 94       	ijmp

00000af4 <__muldi3>:
 af4:	df 93       	push	r29
 af6:	cf 93       	push	r28
 af8:	1f 93       	push	r17
 afa:	0f 93       	push	r16
 afc:	9a 9d       	mul	r25, r10
 afe:	f0 2d       	mov	r31, r0
 b00:	21 9f       	mul	r18, r17
 b02:	f0 0d       	add	r31, r0
 b04:	8b 9d       	mul	r24, r11
 b06:	f0 0d       	add	r31, r0
 b08:	8a 9d       	mul	r24, r10
 b0a:	e0 2d       	mov	r30, r0
 b0c:	f1 0d       	add	r31, r1
 b0e:	03 9f       	mul	r16, r19
 b10:	f0 0d       	add	r31, r0
 b12:	02 9f       	mul	r16, r18
 b14:	e0 0d       	add	r30, r0
 b16:	f1 1d       	adc	r31, r1
 b18:	4e 9d       	mul	r20, r14
 b1a:	e0 0d       	add	r30, r0
 b1c:	f1 1d       	adc	r31, r1
 b1e:	5e 9d       	mul	r21, r14
 b20:	f0 0d       	add	r31, r0
 b22:	4f 9d       	mul	r20, r15
 b24:	f0 0d       	add	r31, r0
 b26:	7f 93       	push	r23
 b28:	6f 93       	push	r22
 b2a:	bf 92       	push	r11
 b2c:	af 92       	push	r10
 b2e:	5f 93       	push	r21
 b30:	4f 93       	push	r20
 b32:	d5 01       	movw	r26, r10
 b34:	0e 94 32 06 	call	0xc64	; 0xc64 <__umulhisi3>
 b38:	8b 01       	movw	r16, r22
 b3a:	ac 01       	movw	r20, r24
 b3c:	d7 01       	movw	r26, r14
 b3e:	0e 94 32 06 	call	0xc64	; 0xc64 <__umulhisi3>
 b42:	eb 01       	movw	r28, r22
 b44:	e8 0f       	add	r30, r24
 b46:	f9 1f       	adc	r31, r25
 b48:	d6 01       	movw	r26, r12
 b4a:	0e 94 ca 05 	call	0xb94	; 0xb94 <__muldi3_6>
 b4e:	2f 91       	pop	r18
 b50:	3f 91       	pop	r19
 b52:	d6 01       	movw	r26, r12
 b54:	0e 94 32 06 	call	0xc64	; 0xc64 <__umulhisi3>
 b58:	c6 0f       	add	r28, r22
 b5a:	d7 1f       	adc	r29, r23
 b5c:	e8 1f       	adc	r30, r24
 b5e:	f9 1f       	adc	r31, r25
 b60:	af 91       	pop	r26
 b62:	bf 91       	pop	r27
 b64:	0e 94 ca 05 	call	0xb94	; 0xb94 <__muldi3_6>
 b68:	2f 91       	pop	r18
 b6a:	3f 91       	pop	r19
 b6c:	0e 94 32 06 	call	0xc64	; 0xc64 <__umulhisi3>
 b70:	c6 0f       	add	r28, r22
 b72:	d7 1f       	adc	r29, r23
 b74:	e8 1f       	adc	r30, r24
 b76:	f9 1f       	adc	r31, r25
 b78:	d6 01       	movw	r26, r12
 b7a:	0e 94 32 06 	call	0xc64	; 0xc64 <__umulhisi3>
 b7e:	e6 0f       	add	r30, r22
 b80:	f7 1f       	adc	r31, r23
 b82:	98 01       	movw	r18, r16
 b84:	be 01       	movw	r22, r28
 b86:	cf 01       	movw	r24, r30
 b88:	11 24       	eor	r1, r1
 b8a:	0f 91       	pop	r16
 b8c:	1f 91       	pop	r17
 b8e:	cf 91       	pop	r28
 b90:	df 91       	pop	r29
 b92:	08 95       	ret

00000b94 <__muldi3_6>:
 b94:	0e 94 32 06 	call	0xc64	; 0xc64 <__umulhisi3>
 b98:	46 0f       	add	r20, r22
 b9a:	57 1f       	adc	r21, r23
 b9c:	c8 1f       	adc	r28, r24
 b9e:	d9 1f       	adc	r29, r25
 ba0:	08 f4       	brcc	.+2      	; 0xba4 <__muldi3_6+0x10>
 ba2:	31 96       	adiw	r30, 0x01	; 1
 ba4:	08 95       	ret

00000ba6 <__umoddi3>:
 ba6:	68 94       	set
 ba8:	01 c0       	rjmp	.+2      	; 0xbac <__udivdi3_umoddi3>

00000baa <__udivdi3>:
 baa:	e8 94       	clt

00000bac <__udivdi3_umoddi3>:
 bac:	8f 92       	push	r8
 bae:	9f 92       	push	r9
 bb0:	cf 93       	push	r28
 bb2:	df 93       	push	r29
 bb4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__udivmod64>
 bb8:	df 91       	pop	r29
 bba:	cf 91       	pop	r28
 bbc:	9f 90       	pop	r9
 bbe:	8f 90       	pop	r8
 bc0:	08 95       	ret

00000bc2 <__udivmod64>:
 bc2:	88 24       	eor	r8, r8
 bc4:	99 24       	eor	r9, r9
 bc6:	f4 01       	movw	r30, r8
 bc8:	e4 01       	movw	r28, r8
 bca:	b0 e4       	ldi	r27, 0x40	; 64
 bcc:	9f 93       	push	r25
 bce:	aa 27       	eor	r26, r26
 bd0:	9a 15       	cp	r25, r10
 bd2:	8b 04       	cpc	r8, r11
 bd4:	9c 04       	cpc	r9, r12
 bd6:	ed 05       	cpc	r30, r13
 bd8:	fe 05       	cpc	r31, r14
 bda:	cf 05       	cpc	r28, r15
 bdc:	d0 07       	cpc	r29, r16
 bde:	a1 07       	cpc	r26, r17
 be0:	98 f4       	brcc	.+38     	; 0xc08 <__udivmod64+0x46>
 be2:	ad 2f       	mov	r26, r29
 be4:	dc 2f       	mov	r29, r28
 be6:	cf 2f       	mov	r28, r31
 be8:	fe 2f       	mov	r31, r30
 bea:	e9 2d       	mov	r30, r9
 bec:	98 2c       	mov	r9, r8
 bee:	89 2e       	mov	r8, r25
 bf0:	98 2f       	mov	r25, r24
 bf2:	87 2f       	mov	r24, r23
 bf4:	76 2f       	mov	r23, r22
 bf6:	65 2f       	mov	r22, r21
 bf8:	54 2f       	mov	r21, r20
 bfa:	43 2f       	mov	r20, r19
 bfc:	32 2f       	mov	r19, r18
 bfe:	22 27       	eor	r18, r18
 c00:	b8 50       	subi	r27, 0x08	; 8
 c02:	31 f7       	brne	.-52     	; 0xbd0 <__udivmod64+0xe>
 c04:	bf 91       	pop	r27
 c06:	27 c0       	rjmp	.+78     	; 0xc56 <__udivmod64+0x94>
 c08:	1b 2e       	mov	r1, r27
 c0a:	bf 91       	pop	r27
 c0c:	bb 27       	eor	r27, r27
 c0e:	22 0f       	add	r18, r18
 c10:	33 1f       	adc	r19, r19
 c12:	44 1f       	adc	r20, r20
 c14:	55 1f       	adc	r21, r21
 c16:	66 1f       	adc	r22, r22
 c18:	77 1f       	adc	r23, r23
 c1a:	88 1f       	adc	r24, r24
 c1c:	99 1f       	adc	r25, r25
 c1e:	88 1c       	adc	r8, r8
 c20:	99 1c       	adc	r9, r9
 c22:	ee 1f       	adc	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	cc 1f       	adc	r28, r28
 c28:	dd 1f       	adc	r29, r29
 c2a:	aa 1f       	adc	r26, r26
 c2c:	bb 1f       	adc	r27, r27
 c2e:	8a 14       	cp	r8, r10
 c30:	9b 04       	cpc	r9, r11
 c32:	ec 05       	cpc	r30, r12
 c34:	fd 05       	cpc	r31, r13
 c36:	ce 05       	cpc	r28, r14
 c38:	df 05       	cpc	r29, r15
 c3a:	a0 07       	cpc	r26, r16
 c3c:	b1 07       	cpc	r27, r17
 c3e:	48 f0       	brcs	.+18     	; 0xc52 <__udivmod64+0x90>
 c40:	8a 18       	sub	r8, r10
 c42:	9b 08       	sbc	r9, r11
 c44:	ec 09       	sbc	r30, r12
 c46:	fd 09       	sbc	r31, r13
 c48:	ce 09       	sbc	r28, r14
 c4a:	df 09       	sbc	r29, r15
 c4c:	a0 0b       	sbc	r26, r16
 c4e:	b1 0b       	sbc	r27, r17
 c50:	21 60       	ori	r18, 0x01	; 1
 c52:	1a 94       	dec	r1
 c54:	e1 f6       	brne	.-72     	; 0xc0e <__udivmod64+0x4c>
 c56:	2e f4       	brtc	.+10     	; 0xc62 <__udivmod64+0xa0>
 c58:	94 01       	movw	r18, r8
 c5a:	af 01       	movw	r20, r30
 c5c:	be 01       	movw	r22, r28
 c5e:	cd 01       	movw	r24, r26
 c60:	00 0c       	add	r0, r0
 c62:	08 95       	ret

00000c64 <__umulhisi3>:
 c64:	a2 9f       	mul	r26, r18
 c66:	b0 01       	movw	r22, r0
 c68:	b3 9f       	mul	r27, r19
 c6a:	c0 01       	movw	r24, r0
 c6c:	a3 9f       	mul	r26, r19
 c6e:	70 0d       	add	r23, r0
 c70:	81 1d       	adc	r24, r1
 c72:	11 24       	eor	r1, r1
 c74:	91 1d       	adc	r25, r1
 c76:	b2 9f       	mul	r27, r18
 c78:	70 0d       	add	r23, r0
 c7a:	81 1d       	adc	r24, r1
 c7c:	11 24       	eor	r1, r1
 c7e:	91 1d       	adc	r25, r1
 c80:	08 95       	ret

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
